[{"title":"Spring Boot 整合Freemarker和thymeleaf","url":"/2019/03/28/Spring-Boot-整合Freemarker/","content":"\nFreeMarker 是一个模板引擎，一个基于模板生成文本输出的通用工具，使用纯 Java 编写，FreeMarker 被设计用来生成 HTML Web 页面，特别是基于 MVC 模式的应用程序，虽然 FreeMarker 具有一些编程的能力，但通常由 Java 程序准备要显示的数据，由FreeMarker 生成页面，通过模板显示准备的数据。符合MVC模式，采用哈希表存储，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据\n\nThymeleaf是用于Web和独立环境的现代服务器端Java模板引擎。Thymeleaf的主要目标是将优雅的自然模板带到您的开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。Thymeleaf能够处理HTML，XML，JavaScript，CSS甚至纯文本。\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Freemarker \n\n## 创建maven项目,添加依赖\n\n```xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-freemarker</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n```\n\n## 编写视图\n\n在templates/ 下建立 userList.ftl:\n\n```html\n<html>\n\t\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>显示用户数据</title>\n\t</head>\n\t<body>\n\t\t<table border=\"1\" align=\"center\" width=\"50%\">\n\t\t\t<tr>\n\t\t\t\t<th>ID</th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Age</th>\n\t\t\t</tr>\n\n            <#list list as user>\n                <tr>\n                    <td>${user.userid}</td>\n                    <td>${user.username}</td>\n                    <td>${user.userage}</td>\n                </tr>\n            </#list>\n\n\t\t</table>\n\t</body>\n</html>\n\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n## 创建Uesrs类\n\n```java\npackage com.caicai.springbootviewfreemarker.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n# 整合thymeleaf\n\n## pom.xml中添加依赖\n\n```xml\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n```\n\n## 编写视图:\n\n在templates/ 下建立 userList2.html:\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n<head>\n    <title>index</title>\n</head>\n<body>\n<table border=\"1\" align=\"center\" width=\"50%\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n\n    <tr th:each=\"user:${list}\">\n        <td th:text=\"${user.userid}\"></td>\n        <td th:text=\"${user.username}\"></td>\n        <td th:text=\"${user.userage}\"></td>\n    </tr>\n\n</table>\n</body>\n</html>\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    @RequestMapping(\"/showuser2\")\n    public String index(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList2\";\n    }\n}\n\n```\n\n","tags":["Spring Boot"]},{"title":"Spring Boot 整合jsp","url":"/2019/03/28/Spring-Boot-整合jsp/","content":"\n Spring Boot 整合jsp\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 创建maven项目,添加pom依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>08-spring-boot-view-jsp</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>08-spring-boot-view-jsp</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n        <!-- tomcat支持 -->\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-jasper</artifactId>\n        </dependency>\n        <!-- jstl标签库 -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n        </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n\n\n## 创建SpringBoot全局配置\n\napplication.yml:\n\n```xml\nspring:\n  mvc:\n    view:\n      prefix: /WEB-INF/jsp/\n      suffix: .jsp\n```\n\n## 创建Users类\n\n```java\npackage com.caicai.springbootviewjsp.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:16\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewjsp.controller;\n\nimport com.caicai.springbootviewjsp.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:15\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n\n\n## 创建jsp\n\nuserList.jsp:\n\n```xml\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n         pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Insert title here</title>\n</head>\n<body>\n    <table border=\"1\" align=\"center\" width=\"50%\">\n        <tr>\n            <th>ID:</th>\n            <th>姓名:</th>\n            <th>年龄</th>\n\n        </tr>\n        <c:forEach items=\"${list}\" var=\"user\">\n        <tr>\n            <td>${user.userid}</td>\n            <td>${user.username}</td>\n            <td>${user.userage}</td>\n        </tr>\n\n\n        </c:forEach>\n    </table>\n</body>\n</html>\n```\n\n\n\n## 创建启动类:\n\n```java\npackage com.caicai.springbootviewjsp;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n\n\n## 效果图:\n\n![](/Spring-Boot-整合jsp/1.png)","tags":["Spring Boot"]},{"title":"Spring-Boot-文件上传","url":"/2019/03/27/Spring-Boot-文件上传/","content":"\nSpring-Boot-文件上传\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 编写Controller\n\n```java\npackage com.caicai.springbootstaticresources1.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FileController\n * @projectName 05-spring-boot-static-resources1\n * @description: TODO\n * @date 2019/3/2719:04\n */\n@RestController\npublic class FileController {\n\n    @RequestMapping(value = \"/fileUploadController\")\n    public String fileUpload(@RequestParam(\"filename\") MultipartFile file){\n        System.out.println(file.getName());\n        try {\n            file.transferTo(new File(\"F:/\"+file.getName()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"success\";\n    }\n}\n\n```\n\n## 编写上传界面\n\n为了方便在static文件夹下建立upload.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件上传</title>\n</head>\n<body>\n    <form action=\"fileUploadController\" method=\"post\" enctype=\"multipart/form-data\">\n        上传文件:<input type=\"file\" name=\"filename\">\n        <input type=\"submit\">\n    </form>\n</body>\n</html>\n```\n\n## 设置上传文件大小的默认值\n\n在resources下建立application.yml文件\n\n```xml\nspring:\n  servlet:\n    multipart:\n      max-file-size: 10MB   #设置单个上传文件的大小\n      max-request-size: 100MB  #设置一次请求上传文件的总容量\n      enabled: true\n```\n\n","tags":["Spring Boot"]},{"title":"Spring-Boot 整合Servlet和Filter","url":"/2019/03/27/Spring-Boot-整合Servlet/","content":"\nSpring-Boot 整合Servlet和Filter\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Servlet\n\n## 传统方式配置\n\n```xml\n\n<servlet>\n<servlet-name>FirstServlet</servlet-name>\n<servlet-class>com.caicai.springbootservlet.filter.FirstFilter</servlet-class>\n</servlet>\n\n<servlet-mapping>\n<servlet-name>FirstServlet</servlet-name>\n<url-pattern>/first</url-pattern>\n</servlet-mapping>\n\n```\n\n## 通过注解扫描注册Servlet\n\n使用@WebServlet注解并在启动类上使用@ServletComponentScan注解\n\n```java\n@WebServlet(name = \"FirstServlet\",urlPatterns = \"/first\")\npublic class FirstServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"FirstServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n```\n\n## 通过方法完成Servlet组件的注册\n\n通过使用@Bean注解的形式注册组件\n\n```java\npublic class SecondServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"SecondServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\npublic class App2 {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public ServletRegistrationBean getServletRegistrationBean() {\n        ServletRegistrationBean bean = new ServletRegistrationBean(new SecondServlet());\n        bean.addUrlMappings(\"/second\");//添加url路径\n        return bean;\n    }\n}\n```\n\n\n\n\n\n# 整合Filter\n\n## 传统方式配置\n\n```xml\n<filter>\n<filter-name>FirstFilter</filter-name>\n<filter-class>com.caicai.springbootservlet.filter.FirstFilter</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>FirstFilter</filter-name>\n<url-pattern>/filter1</url-pattern>\n</filter-mapping>\n\n```\n\n\n\n## 通过注解扫描注册Servlet\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FirstFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n//@WebFilter(filterName = \"\",urlPatterns ={\"*.do\",\"*.jsp\"})\n@WebFilter(filterName = \"FirstFilter\",urlPatterns =\"/filter1\")\npublic class FirstFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n启动类:\n\n````java\npackage com.caicai.springbootservlet;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\n\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class App3 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App3.class, args);\n\t}\n\n}\n\n````\n\n## 通过方法完成Filter的注册\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: SecondFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n\npublic class SecondFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter2.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter2.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n```java\npackage com.caicai.springbootservlet;\n\nimport com.caicai.springbootservlet.filter.SecondFilter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class App4 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App4.class, args);\n\t}\n\n\t@Bean\n\tpublic FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean bean = new FilterRegistrationBean(new SecondFilter()) ;\n        bean.addUrlPatterns(\"/filter2\");\n        return bean;\n    }\n\n}\n```\n\n","tags":["Spring Boot","Servlet"]},{"title":"String，StringBuilder，StringBuffer三者的区别","url":"/2019/03/26/string相关/","content":"\n最近突然被问起String，StringBuilder，StringBuffer三者的区别,发现自己确实对这方面的知识不是很了解.所以学习了一下做个笔记.\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## String\n\n+ String 类是一个常量，String类本身和其中存储字符的数组都是用final关键字修饰的,所以不能被继承\n\n```java\n    /** The value is used for character storage. */\n    private final char value[];\n```\n\n### String str=\"hello world\"和String str=new String(\"hello world\")的区别\n\n\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string1 = \"hello word\";\n        String string2 = new String(\"hello world\");\n        String string3 = \"hello word\";\n        String string4 = new String(\"hello world\");\n        System.out.println(string1 == string2);\n        System.out.println(string1 == string3);\n        System.out.println(string2 == string4);\n    }\n}\n\n```\n\n上面代码的输出结果为:\n\nfalse\n\ntrue\n\nfalse\n\n我们发现 同样都都是\"helllo world\" string1 和 string3 相等.是因为string1 和 string3 都是赋值为一个字面常量\"hello world\",在JVM运行时候,会在常量池里寻找是否已经存在相同的常量,如果存在便直接将引用指向已有常量,否则就创建一个常量,并且将引用指向他,对于string2 和string4来说,两者都是采取了new 来创建的,是两个不同的对象,所以不相等.\n\n## StringBuilder\n\n\n\n在第二点中,我们看到String是一个final类,打开StringBuilder,我们发现StringBuilder类是AbstractStringBuilder的子类,在AbstractStringBuilder类中,我们看到与String不同,StringBuilder存储字符的数组是可变的\n\n```java\n  /**\n     * The value is used for character storage.\n     */\n    char[] value;\n```\n\n## StringBuilder和String 区别\n\n\n\n对于实际应用来说 假设有如下代码\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string = \"\";\n        for (int i = 0; i < 1000; i++) {\n            string += \"A\";\n        }\n\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 1000; i++) {\n            stringBuilder.append(\"A\");\n        }\n    }\n}\n\n```\n\n上述代码进行了一个1000次的循环,每次在字符串string后面追加一个字符A,无论使用的是String,还是StringBuilder,最后的结果都为长度为1000的字符全为A的字符串.而不同的是,如果使用StringBuilder,append操作是在原有的对象基础上进行的,而使用String每次循环都会新建一个StringBuilder对象,进行append操作,通过toString方法返回String对象,如果这些对象没有被回收会浪费大量资源,\n\n## StringBuilder和StringBuffer区别\n\n对比StringBuilder和StringBuffer源码,我们发现在StringBuffer中很多方法都加上了synchronized关键字,所以StringBuffer是线程安全的,不过相应的,在提升了安全的同时对资源的消耗也会增大\n\n```java\n        /**\n         * StringBuffer append方法\n         */\n        @Override\n        public synchronized StringBuffer append (String str){\n            toStringCache = null;\n            super.append(str);\n            return this;\n        }\n        \n        /**\n         * StringBuilder append方法\n         */\n\n        @Override\n        public StringBuilder append (String str){\n            super.append(str);\n            return this;\n        }\n```\n\n## 结论\n\n三个类应当根据不同的情况来进行选择使用：\n\n当字符串相加操作或者改动较少的情况下，建议使用 String str=\"hello\"这种形式\n\n当字符串相加操作较多的情况下，建议使用StringBuilder\n\n如果采用了多线程，则使用StringBuffer。\n\n","tags":["java","String"]},{"title":"swagger2简介","url":"/2019/03/19/swagger2简介/","content":"\nSwagger 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 关于Swagger\n\n\n\nSwagger能成为最受欢迎的REST APIs文档生成工具之一，有以下几个原因：\n\n- Swagger 可以生成一个具有互动性的API控制台，开发者可以用来快速学习和尝试API。\n- Swagger 可以生成客户端SDK代码用于各种不同的平台上的实现。\n- Swagger 文件可以在许多不同的平台上从代码注释中自动生成。\n- Swagger 有一个强大的社区，里面有许多强悍的贡献者。\n\nSwagger 文档提供了一个方法，使我们可以用指定的 JSON 或者 YAML 摘要来描述你的 API，包括了比如 names、order 等 API 信息。\n\n你可以通过一个文本编辑器来编辑 Swagger 文件，或者你也可以从你的代码注释中自动生成。各种工具都可以使用 Swagger 文件来生成互动的 API 文档。\n\n> 注意：用 Swagger 文件生成互动的 API 文档是最精简的，它展示了资源、参数、请求、响应。但是它不会提供你的API如何工作的其他任何一个细节。\n\n## Spring Boot集成使用Swagger\n\n### 创建Spring Boot Web工程并且引入Swagger依赖\n\n所需Swagger依赖可以在[Maven仓库](https://mvnrepository.com/) 中找查询\n\n```xml\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n```\n\n### 创建User实体类\n\n```java\npackage com.example.demo.domain;\n\n/**\n * @author liu\n * @title: User\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:52\n */\npublic class User {\n    private Long id;\n    private String username;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                '}';\n    }\n}\n\n```\n\n### 在启动类目录创建Swagger2配置类\n\n```java\npackage com.example.demo;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2  {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.controller\"))//扫描controller下的包\n                .paths(PathSelectors.any())\n                .build();\n    }\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .description(\"swagger2 构建APIS\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n### 创建UserController类\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.domain.User;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author liu\n * @title: HelloController\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:48\n */\n@RestController\n@Api(tags = \"用户模块\")\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    /**\n     * 此处为了方便直接用一个Map来模拟数据库进行操作\n     */\n    static Map<Long, User> userMap;\n\n    static {\n        userMap = new HashMap<>();\n        User user = new User();\n        user.setId((long) 10000);\n        user.setUsername(\"admin\");\n        userMap.put((long) 10000,user);\n    }\n\n    @ApiOperation(value = \"获取用户列表\")\n    @RequestMapping(value = \"list\", method = RequestMethod.GET)\n    public List<User> getUserList() {\n\n        return new ArrayList<User>(userMap.values());\n    }\n\n\n    @ApiOperation(value = \"创建用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.POST)\n    public String postUser(User user) {\n\n        userMap.put(user.getId(),user);\n        return \"添加成功\";\n    }\n\n\n\n    @ApiOperation(value = \"获取用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.GET)\n    public User getUser(@RequestParam(\"id\") Long id) {\n        System.out.println(id);\n        return userMap.get(id);\n    }\n\n\n\n    @ApiOperation(value = \"更新用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.PUT)\n    public String putUser(User user) {\n        userMap.put(user.getId(),user);\n        return \"更新成功\";\n    }\n\n\n    @ApiOperation(value = \"删除用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.DELETE)\n    public String deleteUser(@RequestParam(\"id\") Long id) {\n        userMap.remove(id);\n        return \"删除成功\";\n    }\n}\n\n```\n\n### 测试:\n\n主界面:\n\n![主界面](/swagger2简介/1.png)\n\n查询用户列表:\n\n![](/swagger2简介/2.png)\n\n创建用户:\n\n![](/swagger2简介/3.png)\n\n获取用户:\n\n![](/swagger2简介/4.png)\n\n删除用户:\n\n![](/swagger2简介/5.png)\n\n## 使用过程中遇到的问题\n\n(1)java.lang.NumberFormatException: For input string: \"\"\n\n在使用@ApiModelProperty注解在字段上时，如果字段的类型为Long或是int类型，那么程序启动后，访问swagger-ui.html的页面，程序会报错\n\njava.lang.NumberFormatException: For input string: \"\"\n在swagger的官方文档中介绍是一个bug；可以忽略这个错误，如果看着不爽，可以调整日志的级别\n\napplication.yml:\n\n```xml\nlogging:\n  level:\n    io.swagger.models.parameters.AbstractSerializableParameter: error\n```\n\n\n\n(2)@Api()注解中使用tags = \"\"参数才能改变api名字 例如@Api(tags = \"用户模块\")\n\n\n\n(3)requestparam 和pathvariable区别 :\n\n@PathVariable:从路径路去获取变量,也就是把路径名当作变量 例如:\n\n```xml\nhttp://localhost:8080/user?id=5\n```\n\n@RequestParam:从请求里面获取参数,例如:\n\n```xml\nhttp://localhost:8080/user?5\n```\n\n","tags":["Spring Boot","swagger"]},{"title":"mysql的时区错误问题： The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one","url":"/2019/03/18/mysql的时区错误问题：-The-server-time-zone-value-OÐ¹u±e×¼E±¼a-is-unrecognized-or-represents-more-than-one/","content":"\n链接数据库时候出现cexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException:\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## spring boot 链接数据库的时候报错\n\n```java\ncexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \n### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n### The error may exist in com/wj/mapper/UserLoginMapper.xml\n### The error may involve com.wj.mapper.UserLoginMapper.selectByName\n### The error occurred while executing a query\n### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)\n    org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:650)\n    org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n```\n```java\njava.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:127)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:95)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:87)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:61)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:71)\n    com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76)\n    com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:862)\n    com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:444)\n    com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:230)\n    com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:226)\n    com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:175)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:220)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:206)\n    com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:203)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1138)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess(BasicResourcePool.java:1125)\n    com.mchange.v2.resourcepool.BasicResourcePool.access$700(BasicResourcePool.java:44)\n    com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask.run(BasicResourcePool.java:1870)\n    com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:696)\n```\n## 解决方案:\n\n据查询是因为电脑的时区和mysql的时区不一样导致的\n用 打开mysql \n\n```sql\nshow variables like '%time_zone%'; //查询mysql的时区\nset global time_zone='+8:00'; //设置时区\n```","tags":["Spring Boot","MYSQL"]},{"title":"navicat 连接 mysql   Client does not support authentication protocol requested by server","url":"/2019/03/18/navicat-连接-mysql-Client-does-not-support-authentication-protocol-requested-by-server/","content":"\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 报错信息:\n\n```java\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n```\n\n## 解决方案:\n\n打开mysql的MySQL Command Line Client 输入:\n```\nUSE mysql;\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';\nFLUSH PRIVILEGES; \n```\n\nlocalhost:本机地址\n123456:要设置的密码","tags":["MYSQL"]},{"title":"hexo 常用命令","url":"/2019/03/18/hexo-常用命令/","content":"\nhexo 的一些常用命令\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## hexo\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n```\n\n## 简写\n\n`hexo n \"我的博客\"` == `hexo new \"我的博客\"` #新建文章\n`hexo p` == `hexo publish`\n`hexo g` == `hexo generate`#生成\n`hexo s` == `hexo server` #启动服务预览\n`hexo d` == `hexo deploy`#部署\n\n## 服务器\n\n`hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n`hexo server -s` #静态模式\n`hexo server -p 5000` #更改端口\n`hexo server -i 192.168.1.1` #自定义 IP\n\n`hexo clean` #清除缓存 网页正常情况下可以忽略此条命令\n`hexo g` #生成静态网页\n`hexo d` #开始部署\n\n### 监视文件变动\n\n`hexo generate` #使用 Hexo 生成静态文件快速而且简单\n`hexo generate --watch` #监视文件变动\n\n### 完成后部署\n\n> 两个命令的作用是相同的\n> `hexo generate --deploy`\n> `hexo deploy --generate`\n\n```\nhexo deploy -g`\n`hexo server -g\n```\n\n## 草稿\n\n```\nhexo publish [layout] <title>\n```\n\n## 模版\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n`hexo deploy` #将.deploy目录部署到GitHub\n\n```\nhexo new [layout] <title>`\n`hexo new photo \"My Gallery\"`\n`hexo new \"Hello World\" --lang tw\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n```\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2019-03-18 14:59:30\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n## 模版（Scaffold）\n\n```\nhexo new photo \"My Gallery\"\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n## 设置文章摘要\n\n```\n以上是文章摘要 <!--more--> 以下是余下全文 \n```\n\n## 写作\n\n```\nhexo new page <title>`\n`hexo new post <title>\n```\n\n| 变量     | 描述                       |\n| -------- | -------------------------- |\n| :title   | 标题                       |\n| :year    | 建立的年份（4 位数）       |\n| :month   | 建立的月份（2 位数）       |\n| :i_month | 建立的月份（去掉开头的零） |\n| :day     | 建立的日期（2 位数）       |\n| :i_day   | 建立的日期（去掉开头的零） |\n\n### 推送到服务器上\n\n```\nhexo n` #写文章\n`hexo g` #生成\n`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g\n```\n\n## 报错\n\n### 1.找不到git部署\n\n```\nERROR Deployer not found: git\n```\n\n**解决方法**\n\n```\nnpm install hexo-deployer-git --save\n```\n\n### 3.部署类型设置git\n\nhexo 3.0 部署类型不再是`github`，`_config.yml` 中修改\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n```\n\n### 4. xcodebuild\n\nxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n\n```\nnpm install bcrypt\n```\n\n### 5. RSS不显示\n\n#### 安装RSS插件\n\n```\nnpm install hexo-generator-feed --save\n```\n\n#### 开启RSS功能\n\n编辑hexo/_config.yml，添加如下代码：\n\n```\nrss: /atom.xml #rss地址  默认即可\n```","tags":["hexo"]}]