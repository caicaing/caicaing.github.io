[{"title":"C语言自学小笔记(二)","url":"/2019/04/17/C语言自学小笔记-二/","content":"\nC语言查缺补漏小笔记\n\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 枚举类型:\n\n例如当我们想用常量表达周一至周日时,可能需要#define七个\n\n```c\n#define MON  1\n#define TUE  2\n#define WED  3\n#define THU  4\n#define FRI  5\n#define SAT  6\n#define SUN  7\n```\n\n这样就会显得代码量很多,所以我们可以采取用创建一个枚举:\n\n```c\n\nenum DAY\n{\n\tMON = 1, TUE, WED, THU, FRI, SAT, SUN\n};\n\n```\n\n第一个枚举成员的默认值为0,后续的枚举成员为前一个成员的值+1,例如上述代码中,MON设置了值为1,那么TUE,WED,THU,FRI,SAT,SUN的值分别为2,3,4,5,6,7;\n\n\n\n\n\n## 指针:\n\n指针是一个变量,他的值是其指向变量的地址,即内存位置的直接地址.\n\n### 指针的声明:\n\n我们可以通过type *var-name 的格式进行声明一个指针,例如\n\n```c\nint    *ip;    /* 一个整型的指针 */\ndouble *dp;    /* 一个 double 型的指针 */\nfloat  *fp;    /* 一个浮点型的指针 */\nchar   *ch;     /* 一个字符型的指针 */\n```\n\n所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。\n\n\n\n### 指针的使用:\n\n既然指针存储的是一个变量的地址,理所应当他的值应该等于地址,我们可以通过&符号来获取到一个变量的地址,然后复制给指针.并且通过*p的方式来访问所指变量\n\n例:\n\n```c\n#include<stdio.h>\n\nint main() {\n\tint a = 10;\n\tint *p = &a;\n\tprintf(\"%d\", *p);\n\tgetchar();\n\n\treturn 0;\n}\n```\n\n\n\n### NULL指针:\n\n在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为**空**指针。NULL 指针是一个定义在标准库中的值为零的常量。\n\n\n\n### 指针的运算:\n\nC指针的值是一个用数值表示的地址,所以指针也可以执行算术运算,可以对指针进行的运算有++,--,+,-.\n\n```c\n#include<stdio.h>\n/**\n++运算\n**/\nint main() {\n\tint a = 10;\n\tint *p = &a;\n\tprintf(\"p所指向的地址%d\\n\", p);\n\tp++;\n\tprintf(\"p++后所指向的地址%d\\n\", p);\n\tchar c = 'c';\n\tchar *pc = &c;\n\tprintf(\"pc所指向的地址%d\\n\", pc);\n\tpc++;\n\tprintf(\"pc++后所指向的地址%d\", pc);\n\tgetchar();\n\n\treturn 0;\n}\n```\n\n\n\n![](C语言自学小笔记-二\\1.png)\n\n运行后我们可以看到进行++运算之后,p的值增加了4,这个4正是一个整型所占的字节数,相对应的,一个char类型所占字节数为1,所以pc进行++操作以后地址增加了1.  既然++操作可以让地址往后跳一个类型的字节数,而C语言中数组的分配内存方式都是连续分配的,所以我们可以用++操作来读取数组里的值.\n\n```c\n#include<stdio.h>\n\nint main() {\n\tint a[5] = {1,2,3,4,5};\n\tfor (int i = 0; i < 5; i++) {\n\t\tprintf(\"%d,\", a[i]);\n\t}\n\tprintf(\"\\n\");\n\tint *p = a;\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tprintf(\"%d,\", *p++);\n\t}\n\n\tgetchar();\n\treturn 0;\n}\n```\n\n--运算跟++运算相反,是对指针所指地址减去类型对应的字节数.\n\n\n\n### 指针的比较:\n\n既然指针所存的数为数值,则指针也可以进行大小比较,例如我们知道数组的第一个元素的地址,和最后一个元素的地址,我们就可以通过地址判断的方式对数组进行遍历\n\n \n\n### 指向指针的指针:\n\n一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：\n\n```c\nint **var;\n```\n\n当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符\n\n## 字符串:\n\n在 C 语言中，字符串实际上是使用 **null** 字符 '\\0' 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。\n\n下面的声明和初始化创建了一个 \"Hello\" 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 \"Hello\" 的字符数多一个。\n\nC 中有大量操作字符串的函数:\n\n```c\nstrcpy(s1, s2); //复制字符串 s2 到字符串 s1。       \nstrcat(s1, s2); //连接字符串 s2 到字符串 s1 的末尾。   \nstrlen(s1); //返回字符串 s1 的长度。               \nstrcmp(s1, s2); //如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于 0；如果 s1>s2 则返回大于 0。\nstrchr(s1, ch); //返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。\nstrstr(s1, s2); //返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。\n```\n\n","tags":["C"]},{"title":"C语言自学小笔记(一)","url":"/2019/04/17/C语言自学小笔记-一/","content":"\nC语言查缺补漏小笔记\n\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 常量定义:\n\nC语言中,有两种简单的定义常量的方式:\n\n1.#define预处理\n\n2.使用const关键字\n\n```c\n#define LENGTH 10\nconst int  LENGTH = 10;\n```\n\n\n\n## 前缀和后缀:\n\n### 前缀:\n\n+ 0x和0X 表示十六进制,例如:0x4b\n+ 0表示八进制,例如:0213\n+ 不带前缀则默认表示十进制\n\n### 后缀:\n\n+ U:表示无符号整数\n+ L:表示长整数\n+ 后缀可大写可小写,且顺序任意,例如:30ul\n\n## C的存储类:\n\n存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：\n\n- auto\n- register\n- static\n- extern\n\n### auto存储类:\n\n局部变量默认的存储类为auto\n\n### register:\n\n**register** 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 '&' 运算符（因为它没有内存位置）.寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 'register' 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。\n\n### static存储类:\n\n**static** 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。\n\nstatic 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。\n\n全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。\n\n以下实例演示了 static 修饰全局变量和局部变量的应用：\n\n\n\n### extern存储类:\n\n**extern** 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 'extern' 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。\n\n当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 *extern* 来得到已定义的变量或函数的引用。可以这么理解，*extern* 是用来在另一个文件中声明一个全局变量或函数。\n\n\n\n## C的运算符:\n\n### 逻辑运算符:\n\n&& : 逻辑与运算符,两个操作数都非零则条件为真,(全真则真,有一假即假)\n\n||    : 逻辑或运算符,两个操作数只要有一个非零则条件为真.(全假则假,一真即真)\n\n!     : 逻辑非运算符,用来逆转操作数逻辑状态,如果条件为真则逻辑非运算符使其为假\n\n\n\n### 位运算符:\n\n```C\n==\t检查两个操作数的值是否相等，如果相等则条件为真。\t(A == B) 不为真。\n!=\t检查两个操作数的值是否相等，如果不相等则条件为真。\t(A != B) 为真。\n<   检查左操作数的值是否大于右操作数的值，如果是则条件为真。\t(A > B) 不为真。\n<\t检查左操作数的值是否小于右操作数的值，如果是则条件为真。\t(A < B) 为真。\n=\t检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。\t(A >= B) 不为真。\n<=\t检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。\t(A <= B) 为真。\n```\n\n\n\n## C函数:\n\n### 传值调用:\n\n传值调用向函数内传的参数实际上是实际值的复制,也叫形参.在这种情况下,修改函数内的形参不会影响实际的参数.\n\n```c\n#include<stdio.h>\n\nvoid swap(int a, int b);\nint main() {\n\tint a = 10;\n\tint b = 20;\n\tswap(10, 20);\n\tprintf(\"a的值为:%d\\n\", a);\n\tprintf(\"b的值为:%d\", b);\n\tgetchar();\n\treturn 0;\n}\n\n\n\nvoid swap(int a, int b) {\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\treturn;\n}\n```\n\n当我们通过main函数调用swap后打印a和b的值,发现a和b的值并没有改变.\n\n\n\n### 传址调用\n\n通过引用传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。\n\n传递指针可以让多个函数访问指针所引用的对象，而不用把对象声明为全局可访问\n\n\n\n```c\n#include<stdio.h>\nvoid swap(int *a, int *b);\nint main() {\n\tint a = 10;\n\tint b = 20;\n\tswap(&a, &b);\n\tprintf(\"a的值为:%d\\n\", a);\n\tprintf(\"b的值为:%d\", b);\n\tgetchar();\n\treturn 0;\n}\n\n\n\nvoid swap(int *a, int *b) {\n\tint temp = *a;\n\t*a = *b;\n\t*b = temp;\n\treturn;\n}\n```\n\n代码运行之后a和b的值调换了\n\n### 引用调用:\n\n在声明函数的时候,声明参数为引用\n\n```c\n#include<stdio.h>\nvoid swap(int &a, int &b);\nint main() {\n\tint a = 10;\n\tint b = 20;\n\tswap(a, b);\n\tprintf(\"a的值为:%d\\n\", a);\n\tprintf(\"b的值为:%d\", b);\n\tgetchar();\n\treturn 0;\n}\n\n\n\nvoid swap(int &a, int &b) {\n\tint temp = a;\n\ta = b;\n\tb = temp;\n\treturn;\n}\n```\n\n代码运行之后a和b的值调换了\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["C"]},{"title":"org.springframework.expression.spel.SpelEvaluationException: EL1008E:","url":"/2019/04/15/org-springframework-expression-spel-SpelEvaluationException-EL1008E/","content":"\n今天发生了一个很诡异的事情,在进行thymeleaf进行前端视图显示的时候总是出现SpelEvaluationException异常.刚开始以为自己的属性名字填错了,经过反复确认发现没填错.后来考虑是不是get方法的问题.去类里一看,果真是get方法出了问题.\n\n\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n正确的get方法是\n\n```java\n    public Long getDid() {\n        return did;\n    }\n```\n\n然而我的get方法是从原来改的,当时为了省劲就直接把名字改了改,直接输入了did,导致在使用${dept.did}时找不到did属性\n\n```java\n    public Long getdid() {\n        return did;\n    }\n```\n\n\n\n\n\n## 错误信息:\n\n```java\n\n\norg.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'did' cannot be found on object of type 'com.caicai.aidangjian.entity.Department' - maybe not public or not valid?\n\tat org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:217) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:104) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:51) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:406) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:90) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:109) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:328) ~[spring-expression-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.expression.Expression.execute(Expression.java:109) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.expression.Expression.execute(Expression.java:138) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.OpenElementTag.beHandled(OpenElementTag.java:205) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.Model.process(Model.java:282) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.Model.process(Model.java:290) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.IteratedGatheringModelProcessable.processIterationModel(IteratedGatheringModelProcessable.java:367) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.IteratedGatheringModelProcessable.process(IteratedGatheringModelProcessable.java:221) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.ProcessorTemplateHandler.handleCloseElement(ProcessorTemplateHandler.java:1640) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleCloseElementEnd(TemplateHandlerAdapterMarkupHandler.java:388) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:322) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleCloseElementEnd(OutputExpressionInlinePreProcessorHandler.java:220) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleCloseElementEnd(InlinedOutputExpressionMarkupHandler.java:164) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.attoparser.HtmlElement.handleCloseElementEnd(HtmlElement.java:169) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.HtmlMarkupHandler.handleCloseElementEnd(HtmlMarkupHandler.java:412) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.MarkupEventProcessorHandler.handleCloseElementEnd(MarkupEventProcessorHandler.java:473) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.ParsingElementMarkupUtil.parseCloseElement(ParsingElementMarkupUtil.java:201) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:725) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.attoparser.MarkupParser.parse(MarkupParser.java:257) ~[attoparser-2.0.5.RELEASE.jar:2.0.5.RELEASE]\n\tat org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072) ~[thymeleaf-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189) ~[thymeleaf-spring5-3.0.11.RELEASE.jar:3.0.11.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_201]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_201]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]\n```\n\n\n\n## \n\n\n\n","tags":["Spring Boot"]},{"title":"JPA Space is not allowed after parameter prefix ':'","url":"/2019/04/14/JPA-Space-is-not-allowed-after-parameter-prefix/","content":"\n查询时候想根据分数排序并且添加对应的名词序号,所以mysql语句中出现了(@i:=@i+1),在navicat下可以正常的运行.但是在使用@Query时出现'JPA Space is not allowed after parameter prefix '':'''错误;\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n@Query注解如下:\n\n```java\n    @Query(value = \"select (@i:=@i+1)pm from record s,(select @i:=0)t  order by score desc;\",nativeQuery = true)\n\n```\n\n\n\n去查资料,解决方案是把:转义 变成//:\n\n\n\n```java\n@Query(value = \"select (@i\\\\:=@i+1)pm from record s,(select @i\\\\:=0)t  order by score desc;\",nativeQuery = true)\n```","tags":["Spring Boot","JPA"]},{"title":"Echarts 初体验","url":"/2019/04/13/Echarts-初体验/","content":"\nECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的矢量图形库 [ZRender](https://github.com/ecomfe/zrender)，提供直观，交互丰富，可高度个性化定制的数据可视化图表。\n\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 引入Echarts.js文件\n\n> Echarts.js文件可以到\n>\n> [echarts官网](<https://echarts.baidu.com/>)下载\n>\n> ```html\n> <script src=\"echarts.min.js\"></script>\n> ```\n>\n> \n\n## 准备一个存放图表的容器\n\n```html\n<div id=\"box\" style=\"width: 600px;height:400px;\"></div>\n```\n\n\n\n## 设置参数 初始化图表\n\n```html\n\t<script>\n    var myChart = echarts.init(document.getElementById(\"box\"));\n\tvar option = {\n\t\ttitle : {\n\t\t\ttext: '未来一周气温变化',\n\t\t\tsubtext: '纯属虚构'\n\t\t},\n\t\ttooltip : {\n\t\t\ttrigger: 'axis'\n\t\t},\n\t\tlegend: {\n\t\t\tdata:['最高气温','最低气温']\n\t\t},\n\t\ttoolbox: {\n\t\t\tshow : true,\n\t\t\tfeature : {\n\t\t\t\tmark : {show: true},\n\t\t\t\tdataView : {show: true, readOnly: false},\n\t\t\t\tmagicType : {show: true, type: ['line', 'bar']},\n\t\t\t\trestore : {show: true},\n\t\t\t\tsaveAsImage : {show: true}\n\t\t\t}\n\t\t},\n\t\tcalculable : true,\n\t\txAxis : [\n\t\t\t{\n\t\t\t\ttype : 'category',\n\t\t\t\tboundaryGap : false,\n\t\t\t\tdata : ['周一','周二','周三','周四','周五','周六','周日']\n\t\t\t}\n\t\t],\n\t\tyAxis : [\n\t\t\t{\n\t\t\t\ttype : 'value',\n\t\t\t\taxisLabel : {\n\t\t\t\t\tformatter: '{value} °C'\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\tseries : [\n\t\t\t{\n\t\t\t\tname:'最高气温',\n\t\t\t\ttype:'line',\n\t\t\t\tdata:[11, 11, 15, 13, 12, 13, 10],\n\t\t\t\tmarkPoint : {\n\t\t\t\t\tdata : [\n\t\t\t\t\t\t{type : 'max', name: '最大值'},\n\t\t\t\t\t\t{type : 'min', name: '最小值'}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tmarkLine : {\n\t\t\t\t\tdata : [\n\t\t\t\t\t\t{type : 'average', name: '平均值'}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tname:'最低气温',\n\t\t\t\ttype:'line',\n\t\t\t\tdata:[1, -2, 2, 5, 3, 2, 0],\n\t\t\t\tmarkPoint : {\n\t\t\t\t\tdata : [\n\t\t\t\t\t\t{name : '周最低', value : -2, xAxis: 1, yAxis: -1.5}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tmarkLine : {\n\t\t\t\t\tdata : [\n\t\t\t\t\t\t{type : 'average', name : '平均值'}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n    myChart.setOption(option);\n</script>\n```\n\n## 效果图\n\n![](/Echarts-初体验/1.png)\n\n​\t\t\t\n\n\n\n![](Echarts-初体验\\2.png)\n\n## 各个配置参数的说明\n\n```java\ntheme = {\n    // 全图默认背景\n    // backgroundColor: 'rgba(0,0,0,0)',\n\n    // 默认色板\n    color: ['#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',\n            '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',\n            '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',\n            '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'],\n\n    // 图表标题\n    title: {\n        x: 'left',                 // 水平安放位置，默认为左对齐，可选为：\n                                   // 'center' ¦ 'left' ¦ 'right'\n                                   // ¦ {number}（x坐标，单位px）\n        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：\n                                   // 'top' ¦ 'bottom' ¦ 'center'\n                                   // ¦ {number}（y坐标，单位px）\n        //textAlign: null          // 水平对齐方式，默认根据x设置自动调整\n        backgroundColor: 'rgba(0,0,0,0)',\n        borderColor: '#ccc',       // 标题边框颜色\n        borderWidth: 0,            // 标题边框线宽，单位px，默认为0（无边框）\n        padding: 5,                // 标题内边距，单位px，默认各方向内边距为5，\n                                   // 接受数组分别设定上右下左边距，同css\n        itemGap: 10,               // 主副标题纵向间隔，单位px，默认为10，\n        textStyle: {\n            fontSize: 18,\n            fontWeight: 'bolder',\n            color: '#333'          // 主标题文字颜色\n        },\n        subtextStyle: {\n            color: '#aaa'          // 副标题文字颜色\n        }\n    },\n\n    // 图例\n    legend: {\n        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：\n                                   // 'horizontal' ¦ 'vertical'\n        x: 'center',               // 水平安放位置，默认为全图居中，可选为：\n                                   // 'center' ¦ 'left' ¦ 'right'\n                                   // ¦ {number}（x坐标，单位px）\n        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：\n                                   // 'top' ¦ 'bottom' ¦ 'center'\n                                   // ¦ {number}（y坐标，单位px）\n        backgroundColor: 'rgba(0,0,0,0)',\n        borderColor: '#ccc',       // 图例边框颜色\n        borderWidth: 0,            // 图例边框线宽，单位px，默认为0（无边框）\n        padding: 5,                // 图例内边距，单位px，默认各方向内边距为5，\n                                   // 接受数组分别设定上右下左边距，同css\n        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔\n        itemWidth: 20,             // 图例图形宽度\n        itemHeight: 14,            // 图例图形高度\n        textStyle: {\n            color: '#333'          // 图例文字颜色\n        }\n    },\n\n    // 值域\n    dataRange: {\n        orient: 'vertical',        // 布局方式，默认为垂直布局，可选为：\n                                   // 'horizontal' ¦ 'vertical'\n        x: 'left',                 // 水平安放位置，默认为全图左对齐，可选为：\n                                   // 'center' ¦ 'left' ¦ 'right'\n                                   // ¦ {number}（x坐标，单位px）\n        y: 'bottom',               // 垂直安放位置，默认为全图底部，可选为：\n                                   // 'top' ¦ 'bottom' ¦ 'center'\n                                   // ¦ {number}（y坐标，单位px）\n        backgroundColor: 'rgba(0,0,0,0)',\n        borderColor: '#ccc',       // 值域边框颜色\n        borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）\n        padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，\n                                   // 接受数组分别设定上右下左边距，同css\n        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔\n        itemWidth: 20,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10\n        itemHeight: 14,            // 值域图形高度，线性渐变垂直布局高度为该值 * 10\n        splitNumber: 5,            // 分割段数，默认为5，为0时为线性渐变\n        color:['#1e90ff','#f0ffff'],//颜色 \n        //text:['高','低'],         // 文本，默认为数值文本\n        textStyle: {\n            color: '#333'          // 值域文字颜色\n        }\n    },\n\n    toolbox: {\n        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：\n                                   // 'horizontal' ¦ 'vertical'\n        x: 'right',                // 水平安放位置，默认为全图右对齐，可选为：\n                                   // 'center' ¦ 'left' ¦ 'right'\n                                   // ¦ {number}（x坐标，单位px）\n        y: 'top',                  // 垂直安放位置，默认为全图顶端，可选为：\n                                   // 'top' ¦ 'bottom' ¦ 'center'\n                                   // ¦ {number}（y坐标，单位px）\n        color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],\n        backgroundColor: 'rgba(0,0,0,0)', // 工具箱背景颜色\n        borderColor: '#ccc',       // 工具箱边框颜色\n        borderWidth: 0,            // 工具箱边框线宽，单位px，默认为0（无边框）\n        padding: 5,                // 工具箱内边距，单位px，默认各方向内边距为5，\n                                   // 接受数组分别设定上右下左边距，同css\n        itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                                   // 横向布局时为水平间隔，纵向布局时为纵向间隔\n        itemSize: 16,              // 工具箱图形宽度\n        featureImageIcon : {},     // 自定义图片icon\n        featureTitle : {\n            mark : '辅助线开关',\n            markUndo : '删除辅助线',\n            markClear : '清空辅助线',\n            dataZoom : '区域缩放',\n            dataZoomReset : '区域缩放后退',\n            dataView : '数据视图',\n            lineChart : '折线图切换',\n            barChart : '柱形图切换',\n            restore : '还原',\n            saveAsImage : '保存为图片'\n        }\n    },\n\n    // 提示框\n    tooltip: {\n        trigger: 'item',           // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n        showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n        hideDelay: 100,            // 隐藏延迟，单位ms\n        transitionDuration : 0.4,  // 动画变换时间，单位s\n        backgroundColor: 'rgba(0,0,0,0.7)',     // 提示背景颜色，默认为透明度为0.7的黑色\n        borderColor: '#333',       // 提示边框颜色\n        borderRadius: 4,           // 提示边框圆角，单位px，默认为4\n        borderWidth: 0,            // 提示边框线宽，单位px，默认为0（无边框）\n        padding: 5,                // 提示内边距，单位px，默认各方向内边距为5，\n                                   // 接受数组分别设定上右下左边距，同css\n        axisPointer : {            // 坐标轴指示器，坐标轴触发有效\n            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'\n            lineStyle : {          // 直线指示器样式设置\n                color: '#48b',\n                width: 2,\n                type: 'solid'\n            },\n            shadowStyle : {                       // 阴影指示器样式设置\n                width: 'auto',                   // 阴影大小\n                color: 'rgba(150,150,150,0.3)'  // 阴影颜色\n            }\n        },\n        textStyle: {\n            color: '#fff'\n        }\n    },\n\n    // 区域缩放控制器\n    dataZoom: {\n        orient: 'horizontal',      // 布局方式，默认为水平布局，可选为：\n                                   // 'horizontal' ¦ 'vertical'\n        // x: {number},            // 水平安放位置，默认为根据grid参数适配，可选为：\n                                   // {number}（x坐标，单位px）\n        // y: {number},            // 垂直安放位置，默认为根据grid参数适配，可选为：\n                                   // {number}（y坐标，单位px）\n        // width: {number},        // 指定宽度，横向布局时默认为根据grid参数适配\n        // height: {number},       // 指定高度，纵向布局时默认为根据grid参数适配\n        backgroundColor: 'rgba(0,0,0,0)',       // 背景颜色\n        dataBackgroundColor: '#eee',            // 数据背景颜色\n        fillerColor: 'rgba(144,197,237,0.2)',   // 填充颜色\n        handleColor: 'rgba(70,130,180,0.8)'     // 手柄颜色\n    },\n\n    // 网格\n    grid: {\n        x: 80,\n        y: 60,\n        x2: 80,\n        y2: 60,\n        // width: {totalWidth} - x - x2,\n        // height: {totalHeight} - y - y2,\n        backgroundColor: 'rgba(0,0,0,0)',\n        borderWidth: 1,\n        borderColor: '#ccc'\n    },\n\n    // 类目轴\n    categoryAxis: {\n        position: 'bottom',    // 位置\n        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'\n        boundaryGap: true,     // 类目起始和结束两端空白策略\n        axisLine: {            // 坐标轴线\n            show: true,        // 默认显示，属性show控制显示与否\n            lineStyle: {       // 属性lineStyle控制线条样式\n                color: '#48b',\n                width: 2,\n                type: 'solid'\n            }\n        },\n        axisTick: {            // 坐标轴小标记\n            show: true,       // 属性show控制显示与否，默认不显示\n            interval: 'auto',\n            // onGap: null,\n            inside : false,    // 控制小标记是否在grid里 \n            length :5,         // 属性length控制线长\n            lineStyle: {       // 属性lineStyle控制线条样式\n                color: '#333',\n                width: 1\n            }\n        },\n        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n            show: true,\n            interval: 'auto',\n            rotate: 0,\n            margin: 8,\n            // formatter: null,\n            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                color: '#333'\n            }\n        },\n        splitLine: {           // 分隔线\n            show: true,        // 默认显示，属性show控制显示与否\n            // onGap: null,\n            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        splitArea: {           // 分隔区域\n            show: false,       // 默认不显示，属性show控制显示与否\n            // onGap: null,\n            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    },\n\n    // 数值型坐标轴默认参数\n    valueAxis: {\n        position: 'left',      // 位置\n        nameLocation: 'end',   // 坐标轴名字位置，支持'start' | 'end'\n        nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式\n        boundaryGap: [0, 0],   // 数值起始和结束两端空白策略\n        splitNumber: 5,        // 分割段数，默认为5\n        axisLine: {            // 坐标轴线\n            show: true,        // 默认显示，属性show控制显示与否\n            lineStyle: {       // 属性lineStyle控制线条样式\n                color: '#48b',\n                width: 2,\n                type: 'solid'\n            }\n        },\n        axisTick: {            // 坐标轴小标记\n            show: false,       // 属性show控制显示与否，默认不显示\n            inside : false,    // 控制小标记是否在grid里 \n            length :5,         // 属性length控制线长\n            lineStyle: {       // 属性lineStyle控制线条样式\n                color: '#333',\n                width: 1\n            }\n        },\n        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n            show: true,\n            rotate: 0,\n            margin: 8,\n            // formatter: null,\n            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                color: '#333'\n            }\n        },\n        splitLine: {           // 分隔线\n            show: true,        // 默认显示，属性show控制显示与否\n            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        splitArea: {           // 分隔区域\n            show: false,       // 默认不显示，属性show控制显示与否\n            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    },\n\n    polar : {\n        center : ['50%', '50%'],    // 默认全局居中\n        radius : '75%',\n        startAngle : 90,\n        splitNumber : 5,\n        name : {\n            show: true,\n            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                color: '#333'\n            }\n        },\n        axisLine: {            // 坐标轴线\n            show: true,        // 默认显示，属性show控制显示与否\n            lineStyle: {       // 属性lineStyle控制线条样式\n                color: '#ccc',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n            show: false,\n            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                color: '#333'\n            }\n        },\n        splitArea : {\n            show : true,\n            areaStyle : {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        },\n        splitLine : {\n            show : true,\n            lineStyle : {\n                width : 1,\n                color : '#ccc'\n            }\n        }\n    },\n\n    // 柱形图默认参数\n    bar: {\n        barMinHeight: 0,          // 最小高度改为0\n        // barWidth: null,        // 默认自适应\n        barGap: '30%',            // 柱间距离，默认为柱形宽度的30%，可设固定值\n        barCategoryGap : '20%',   // 类目间柱形距离，默认为类目间距的20%，可设固定值\n        itemStyle: {\n            normal: {\n                // color: '各异',\n                barBorderColor: '#fff',       // 柱条边线\n                barBorderRadius: 0,           // 柱条边线圆角，单位px，默认为0\n                barBorderWidth: 1,            // 柱条边线线宽，单位px，默认为1\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            },\n            emphasis: {\n                // color: '各异',\n                barBorderColor: 'rgba(0,0,0,0)',   // 柱条边线\n                barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0\n                barBorderWidth: 1,                 // 柱条边线线宽，单位px，默认为1\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            }\n        }\n    },\n\n    // 折线图默认参数\n    line: {\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                lineStyle: {\n                    width: 2,\n                    type: 'solid',\n                    shadowColor : 'rgba(0,0,0,0)', //默认透明\n                    shadowBlur: 5,\n                    shadowOffsetX: 3,\n                    shadowOffsetY: 3\n                }\n            },\n            emphasis: {\n                // color: 各异,\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            }\n        },\n        //smooth : false,\n        //symbol: null,         // 拐点图形类型\n        symbolSize: 2,          // 拐点图形大小\n        //symbolRotate : null,  // 拐点图形旋转控制\n        showAllSymbol: false    // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n    },\n\n    // K线图默认参数\n    k: {\n        // barWidth : null          // 默认自适应\n        // barMaxWidth : null       // 默认自适应 \n        itemStyle: {\n            normal: {\n                color: '#fff',          // 阳线填充颜色\n                color0: '#00aa11',      // 阴线填充颜色\n                lineStyle: {\n                    width: 1,\n                    color: '#ff3200',   // 阳线边框颜色\n                    color0: '#00aa11'   // 阴线边框颜色\n                }\n            },\n            emphasis: {\n                // color: 各异,\n                // color0: 各异\n            }\n        }\n    },\n\n    // 散点图默认参数\n    scatter: {\n        //symbol: null,      // 图形类型\n        symbolSize: 4,       // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n        //symbolRotate : null,  // 图形旋转控制\n        large: false,        // 大规模散点图\n        largeThreshold: 2000,// 大规模阀值，large为true且数据量>largeThreshold才启用大规模模式\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            },\n            emphasis: {\n                // color: '各异'\n                label: {\n                    show: false\n                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                    //           'inside'|'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            }\n        }\n    },\n\n    // 雷达图默认参数\n    radar : {\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                label: {\n                    show: false\n                },\n                lineStyle: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            emphasis: {\n                // color: 各异,\n                label: {\n                    show: false\n                }\n            }\n        },\n        //symbol: null,         // 拐点图形类型\n        symbolSize: 2           // 可计算特性参数，空数据拖拽提示图形大小\n        //symbolRotate : null,  // 图形旋转控制\n    },\n\n    // 饼图默认参数\n    pie: {\n        center : ['50%', '50%'],    // 默认全局居中\n        radius : [0, '75%'],\n        clockWise : false,          // 默认逆时针\n        startAngle: 90,\n        minAngle: 0,                // 最小角度改为0\n        selectedOffset: 10,         // 选中是扇区偏移量\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                borderColor: '#fff',\n                borderWidth: 1,\n                label: {\n                    show: true,\n                    position: 'outer'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                labelLine: {\n                    show: true,\n                    length: 20,\n                    lineStyle: {\n                        // color: 各异,\n                        width: 1,\n                        type: 'solid'\n                    }\n                }\n            },\n            emphasis: {\n                // color: 各异,\n                borderColor: 'rgba(0,0,0,0)',\n                borderWidth: 1,\n                label: {\n                    show: false\n                    // position: 'outer'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                labelLine: {\n                    show: false,\n                    length: 20,\n                    lineStyle: {\n                        // color: 各异,\n                        width: 1,\n                        type: 'solid'\n                    }\n                }\n            }\n        }\n    },\n\n    map: {\n        mapType: 'china',   // 各省的mapType暂时都用中文\n        mapLocation: {\n            x : 'center',\n            y : 'center'\n            // width    // 自适应\n            // height   // 自适应\n        },\n        showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                borderColor: '#fff',\n                borderWidth: 1,\n                areaStyle: {\n                    color: '#ccc'//rgba(135,206,250,0.8)\n                },\n                label: {\n                    show: false,\n                    textStyle: {\n                        color: 'rgba(139,69,19,1)'\n                    }\n                }\n            },\n            emphasis: {                 // 也是选中样式\n                // color: 各异,\n                borderColor: 'rgba(0,0,0,0)',\n                borderWidth: 1,\n                areaStyle: {\n                    color: 'rgba(255,215,0,0.8)'\n                },\n                label: {\n                    show: false,\n                    textStyle: {\n                        color: 'rgba(139,69,19,1)'\n                    }\n                }\n            }\n        }\n    },\n\n    force : {\n        // 数据map到圆的半径的最小值和最大值\n        minRadius : 10,\n        maxRadius : 20,\n        density : 1.0,\n        attractiveness : 1.0,\n        // 初始化的随机大小位置\n        initSize : 300,\n        // 向心力因子，越大向心力越大\n        centripetal : 1,\n        // 冷却因子\n        coolDown : 0.99,\n        // 分类里如果有样式会覆盖节点默认样式\n        itemStyle: {\n            normal: {\n                // color: 各异,\n                label: {\n                    show: false\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                nodeStyle : {\n                    brushType : 'both',\n                    color : '#f08c2e',\n                    strokeColor : '#5182ab'\n                },\n                linkStyle : {\n                    strokeColor : '#5182ab'\n                }\n            },\n            emphasis: {\n                // color: 各异,\n                label: {\n                    show: false\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                nodeStyle : {},\n                linkStyle : {}\n            }\n        }\n    },\n\n    chord : {\n        radius : ['65%', '75%'],\n        center : ['50%', '50%'],\n        padding : 2,\n        sort : 'none', // can be 'none', 'ascending', 'descending'\n        sortSub : 'none', // can be 'none', 'ascending', 'descending'\n        startAngle : 90,\n        clockWise : false,\n        showScale : false,\n        showScaleText : false,\n        itemStyle : {\n            normal : {\n                label : {\n                    show : true\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                lineStyle : {\n                    width : 0,\n                    color : '#000'\n                },\n                chordStyle : {\n                    lineStyle : {\n                        width : 1,\n                        color : '#666'\n                    }\n                }\n            },\n            emphasis : {\n                lineStyle : {\n                    width : 0,\n                    color : '#000'\n                },\n                chordStyle : {\n                    lineStyle : {\n                        width : 2,\n                        color : '#333'\n                    }\n                }\n            }\n        }\n    },\n\n    island: {\n        r: 15,\n        calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%\n    },\n\n    markPoint : {\n        symbol: 'pin',         // 标注类型\n        symbolSize: 10,        // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n        //symbolRotate : null, // 标注旋转控制\n        itemStyle: {\n            normal: {\n                // color: 各异，\n                // borderColor: 各异,     // 标注边线颜色，优先于color \n                borderWidth: 2,            // 标注边线线宽，单位px，默认为1\n                label: {\n                    show: true,\n                    position: 'inside' // 可选为'left'|'right'|'top'|'bottom'\n                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            },\n            emphasis: {\n                // color: 各异\n                label: {\n                    show: true\n                    // position: 'inside'  // 'left'|'right'|'top'|'bottom'\n                    // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE\n                }\n            }\n        }\n    },\n\n    markLine : {\n        // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string\n        symbol: ['circle', 'arrow'],  \n        // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n        symbolSize: [2, 4],\n        // 标线起始和结束的symbol旋转控制\n        //symbolRotate : null,\n        itemStyle: {\n            normal: {\n                // color: 各异,           // 标线主色，线色，symbol主色\n                // borderColor: 随color,     // 标线symbol边框颜色，优先于color \n                borderWidth: 2,          // 标线symbol边框线宽，单位px，默认为2\n                label: {\n                    show: false,\n                    // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'\n                    position: 'inside',  \n                    textStyle: {         // 默认使用全局文本样式，详见TEXTSTYLE\n                        color: '#333'\n                    }\n                },\n                lineStyle: {\n                    // color: 随borderColor, // 主色，线色，优先级高于borderColor和color\n                    // width: 随borderWidth, // 优先于borderWidth\n                    type: 'solid',\n                    shadowColor : 'rgba(0,0,0,0)', //默认透明\n                    shadowBlur: 5,\n                    shadowOffsetX: 3,\n                    shadowOffsetY: 3\n                }\n            },\n            emphasis: {\n                // color: 各异\n                label: {\n                    show: false\n                    // position: 'inside' // 'left'|'right'|'top'|'bottom'\n                    // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n                },\n                lineStyle : {}\n            }\n        }\n    },\n\n    textStyle: {\n        decoration: 'none',\n        fontFamily: 'Arial, Verdana, sans-serif',\n        fontFamily2: '微软雅黑',    // IE8- 字体模糊并且不支持不同字体混排，额外指定一份\n        fontSize: 12,\n        fontStyle: 'normal',\n        fontWeight: 'normal'\n    },\n\n    // 默认标志图形类型列表\n    symbolList : [\n      'circle', 'rectangle', 'triangle', 'diamond',\n      'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'\n    ],\n    loadingText : 'Loading...',\n    // 可计算特性配置，孤岛，提示颜色\n    calculable: false,              // 默认关闭可计算特性\n    calculableColor: 'rgba(255,165,0,0.6)',       // 拖拽提示边框颜色\n    calculableHolderColor: '#ccc', // 可计算占位提示颜色\n    nameConnector: ' & ',\n    valueConnector: ' : ',\n    animation: true,\n    animationThreshold: 2500,       // 动画元素阀值，产生的图形原素超过2500不出动画\n    addDataAnimation: true,         // 动态数据接口是否开启动画效果\n    animationDuration: 2000,\n    animationEasing: 'ExponentialOut'    //BounceOut\n}\n\n```\n\n","tags":["Echarts"]},{"title":"Spring Boot 拦截器","url":"/2019/04/12/Spring-Boot-登录拦截器验证/","content":"\njava里的拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。\n\n\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## HandlerInterceptor 接口介绍:\n\n在HandlerInterceptor 中有三个方法:\n\n```java\ndefault boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    return true;\n}\n\ndefault void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {\n}\n\ndefault void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n}\n```\n\n**preHandle:** 预处理方法,实现处理器的预处理(例如登录状态),handler参数为相应的处理器,返回值:true表示继续流程,false表示流程中断,我们需要通过reponse来产生响应.\n\n**postHandle**：后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。\n\n**afterCompletion**：整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中preHandle返回true的拦截器的afterCompletion。\n\n\n\n## 配置拦截器:\n\n### 创建拦截器类:\n\n```java\npackage caicai.springbootinterceptor1.interceptor;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * @author liu\n * @title: LoginInterceptor\n * @projectName spring-boot-interceptor1\n * @description: TODO\n * @date 2019/4/1216:31\n */\npublic class LoginInterceptor implements HandlerInterceptor{\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"preHandle.............................\");\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {\n        System.out.println(\"postHandle.............................\");\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n        System.out.println(\"afterCompletion.............................\");\n    }\n}\n```\n\n### 创建拦截器配置类:\n\n```java\npackage caicai.springbootinterceptor1.config;\n\nimport caicai.springbootinterceptor1.interceptor.LoginInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * @author liu\n * @title: LoginInterceptorConfig\n * @projectName spring-boot-interceptor1\n * @description: TODO\n * @date 2019/4/1216:33\n */\n@Configuration\npublic class LoginInterceptorConfig implements WebMvcConfigurer{\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/**\").excludePathPatterns(\"/login\");\n\n    }\n}\n```\n\naddPathPatterns(\"/**\"):表示拦截所有的url请求;\n\nexcludePathPatterns(\"/login\"):表示排除login\n\n完成了拦截器配置后,在启动springboot项目的时候,除了login以外,其他所有的请求都会经过拦截器处理,我们可以使用preHandle来完成一个登录验证的功能\n\n\n\n## 登录验证实现:\n\n### 效果:\n\n1.有两个界面: 登录界面, 主界面\n\n2:登录界面和主界面都可以通过相应请求跳转到,但是主界面只有登录之后才能查看,否则就跳回登录界面\n\n项目目录:\n\n![](Spring-Boot-登录拦截器验证\\1.png)\n\n### \n\n### index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form action=\"/login\">\n    <span>用户名:</span> <input type=\"text\" name=\"username\">\n    <span>密码:</span>  <input type=\"text\" name=\"password\">\n    <button>提交</button>\n</form>\n</body>\n</html>\n```\n\n\n\n### main.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"><head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h1>这里是主页面</h1>\n当前登录用户:<span th:text=\"${session.username}\"></span>\n</body>\n</html>\n```\n\n如果登录的话 ${session.username}会获取到存贮在session中的用户名\n\n\n\n\n\n### Logininterceptor.java\n\n```java\npackage caicai.springbootinterceptor1.interceptor;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * @author liu\n * @title: LoginInterceptor\n * @projectName spring-boot-interceptor1\n * @description: TODO\n * @date 2019/4/1216:31\n */\npublic class LoginInterceptor implements HandlerInterceptor{\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        /**\n        通过session中的用户名来判断是否登录,因为一旦登录了就会在session中存储用户名\n        **/\n        if(request.getSession().getAttribute(\"username\")!=null){\n            System.out.println(\"登录了\");\n            return true;\n        }else{\n            System.out.println(\"未登录\");\n            response.sendRedirect(request.getContextPath()+\"/index\");\n\n            return false;\n        }\n\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {\n        System.out.println(\"postHandle.............................\");\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n        System.out.println(\"afterCompletion.............................\");\n    }\n}\n```\n\n\n\n### LoginController\n\n```java\npackage caicai.springbootinterceptor1.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * @author liu\n * @title: LoginController\n * @projectName spring-boot-interceptor1\n * @description: TODO\n * @date 2019/4/1216:22\n */\n@Controller\npublic class LoginController {\n\n    /**\n    登录界面的url映射\n    **/\n    @RequestMapping(\"/index\")\n    public String index(){\n        return \"index\";\n    }\n    /**\n    登录,此处直接用字符串是否是admin的方式来模拟数据库查询登录\n    若账号密码正确则跳转到main界面若账号密码错误则继续跳转到登录界面\n    **/\n    @RequestMapping(\"/login\")\n    public String login(String username, String password, HttpServletRequest request){\n        if (username.equals(\"admin\")&& password.equals(\"admin\")){\n            request.getSession().setAttribute(\"username\",username);\n            return \"main\";\n        }else {\n            return \"login\";\n        }\n    }\n    /**\n    主界面的url映射  为了测试不登陆直接进主页面被拦截\n    **/\n    @RequestMapping(\"/main\")\n    public String main(){\n        return \"main\";\n    }\n\n}\n```\n\n### LoginInterceptorConfig.java:\n\n配置文件,配置了拦截器和拦截路径\n\n```java\npackage caicai.springbootinterceptor1.config;\n\nimport caicai.springbootinterceptor1.interceptor.LoginInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * @author liu\n * @title: LoginInterceptorConfig\n * @projectName spring-boot-interceptor1\n * @description: TODO\n * @date 2019/4/1216:33\n */\n@Configuration\npublic class LoginInterceptorConfig implements WebMvcConfigurer{\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/**\").excludePathPatterns(\"/login\").excludePathPatterns(\"/index\");\n\n    }\n}\n```\n\n\n\n本实例只是粗略的完成了登录拦截的功能,对于一些细节没有完善,例如错误提示等.","tags":["Spring Boot"]},{"title":"MYSQL随机选择数据","url":"/2019/04/10/MYSQL随机选择数据/","content":"\n最近在做一个在线考试系统,遇到需要随机选择20道选择题的需求.\n\n\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 使用ORDER BY RAND()选择随机记录\n\nMySQL没有内置语句来从数据库表中选择随机记录。为了实现这个目的，可使用`RAND`函数。 以下查询是从数据库表中选择N个随机记录：\n\n```mysql\nSELECT \n    *\nFROM\n    tbl\nORDER BY RAND()\nLIMIT N;\n```\n\n- `RAND（）`函数为表中的每一行生成一个随机值。 \n- [ORDER BY](http://www.studymysql.com/mysql/order-by.html)子句按照`RAND（）`函数生成的随机数对表中的所有行进行排序。 \n\n这种技术非常适合小表。如果在大的表上执行速度是非常缓慢的，因为MySQL必须排序整个表，以挑选随机的行数据。查询的速度还取决于表中的行数。表具有的行越多，MySQL都要为每行生成随机数，所以所需的时间就越多。\n\n\n\n","tags":["MYSQL"]},{"title":"Jpa 自定义查询语句","url":"/2019/04/10/jpa-自定义查询语句/","content":"\n在使用Spring Data Jpa框架时，根据业务需求我们通常需要进行复杂的数据库查询，并返回我们自定义的实体类，而在该框架下，目前仅仅支持返回与数据库映射进行持久化的POJO实体。虽然在框架上我们可以使用@Query注解执行我们自定义的sql语句，但是其返回值为List<Object[]> 类型，即多个Object数组的List集合。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## @Query()注解\n\n通过使@query注解,可以自定义语句进行sql操作\n\n下例为在数据库中查询10个随机的选择题的自定义查询方法:\n\n```java\npublic interface MultipleChoiceRepository extends JpaRepository<MultipleChoice,Long> {\n    @Query(value = \"select * from choice ORDER BY RAND() limit :num\",nativeQuery = true)\n    public List<MultipleChoice> findByNmber(@Param(\"num\") Integer num);\n}\n```\n\n## 开启mysql语句\n\n```java\n  @Query(value = \"\",nativeQuery = true)  //nativeQuery= true开启mysql\n```\n\n## @Modefying()注解\n\n如果是删除或修改操作，需要加入此注解进行修饰. 以通知 SpringData， 这是一个 UPDATE 或 DELETE 操作 ；默认情况下，是只读，所以查询不需要\n\n# 参数传递:\n\n## @Param()注解\n\n使用@Param注解可以给查询语句中注入参数\n\n```java\n@Param(\"num\") Integer num\n```\n\n在sql语句中使用  :参数名    进行调用\n\n## 使用?占位符\n\n```java\npublic interface MultipleChoiceRepository extends JpaRepository<MultipleChoice,Long> {\n    @Query(value = \"select * from choice ORDER BY RAND() limit ?\",nativeQuery = true)\n\n    public List<MultipleChoice> findByNmber(Integer num);\n\n}\n```\n\nsql语句中也可以使用?占位符的方式进行参数写入","tags":["Spring Boot"]},{"title":"Spring Boot Jpa","url":"/2019/03/31/Spring-Boot-Jpa/","content":"\n  全称Java Persistence API，通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。\n\n​     JPA的出现有两个原因：\n 其一，简化现有Java EE和Java SE应用的对象持久化的开发工作；\n 其二，Sun希望整合对ORM技术，实现持久化领域的统一。\n\n​     JPA提供的技术：\n\n 1）ORM映射元数据：JPA支持XML和JDK 5.0注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中；\n\n 2）JPA 的API：用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。\n\n 3）查询语言：通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## pom.xml中导入依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>2.1.3.RELEASE</version>\n      <relativePath/> <!-- lookup parent from repository -->\n   </parent>\n   <groupId>com.caicai</groupId>\n   <artifactId>spring-boot-jpa</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <name>spring-boot-jpa</name>\n   <description>Demo project for Spring Boot</description>\n\n   <properties>\n      <java.version>1.8</java.version>\n   </properties>\n\n   <dependencies>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-data-jpa</artifactId>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-jdbc</artifactId>\n      </dependency>\n\n      <dependency>\n         <groupId>mysql</groupId>\n         <artifactId>mysql-connector-java</artifactId>\n         <scope>runtime</scope>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-test</artifactId>\n         <scope>test</scope>\n      </dependency>\n   </dependencies>\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n         </plugin>\n      </plugins>\n   </build>\n\n</project>\n```\n\n## 创建实体类\n\n```java\npackage com.caicai.springbootjpa.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author liu\n * @title: User\n * @projectName spring-boot-jpa\n * @description: TODO\n * @date 2019/3/3121:14\n */\n\n@Entity\npublic class User {\n    @GeneratedValue(strategy = GenerationType.AUTO)//设置自增长策略\n    @Id\n    private Integer id;\n    @Column(length = 20,nullable = false)  //column可以设置属性\n    private String name;\n    @Column(length = 20,nullable = true)\n    private Integer age;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public User() {\n    }\n\n    public User(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n```\n\n\n\n## 创建UserRepository\n\n```java\npackage com.caicai.springbootjpa.repository;\n\nimport com.caicai.springbootjpa.entity.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author liu\n * @title: UserRepository\n * @projectName spring-boot-jpa\n * @description: TODO\n * @date 2019/3/3121:06\n */\npublic interface UserRepository extends JpaRepository<User,Integer>{\n}\n\n```\n\n## 配置数据源和自动建表:\n\n```xml\nspring:\n  datasource:\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/jpa\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n```\n\n\n\n## 测试类:\n\n```java\npackage com.caicai.springbootjpa;\n\nimport com.caicai.springbootjpa.entity.User;\nimport com.caicai.springbootjpa.repository.UserRepository;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBootJpaApplicationTests {\n    @Autowired\n    UserRepository userRepository;\n\t@Test\n\tpublic void test() {\n\t    User user = new User();\n\t    user.setAge(10);\n\t    user.setName(\"caicai\");\n\t    userRepository.save(user);\n\t}\n\n}\n```\n\n","tags":["Spring Boot"]},{"title":"Spring Boot 整合Mybatis(基于注解)","url":"/2019/03/31/Spring-Boot-整合Mybatis-基于注解/","content":"\n基于注解的Spring Boot 整合Mybatis\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 项目结构\n\n![](Spring-Boot-整合Mybatis-基于注解\\1.png)\n\n## pom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>spring-boot-mybatis-annotation</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>spring-boot-mybatis-annotation</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## UserMapper.java\n\n```java\npackage com.caicai.springbootmybatisannotation.mapper;\n\nimport com.caicai.springbootmybatisannotation.pojo.User;\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * @author liu\n * @title: UserMapper\n * @projectName spring-boot-mybatis-annotation\n * @description: TODO\n * @date 2019/3/3120:16\n */\n@Mapper\npublic interface UserMapper {\n    @Insert(\"insert into users(name,age) values(#{name},#{age})\")\n    public void addUser(User user);\n\n}\n```\n\n\n\n## User.java\n\n```java\npackage com.caicai.springbootmybatisannotation.pojo;\n\n/**\n * @author liu\n * @title: User\n * @projectName spring-boot-mybatis-annotation\n * @description: TODO\n * @date 2019/3/3120:16\n */\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public User() {\n    }\n\n    public User(Integer id, String name, Integer age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n```\n\n\n\n## application.yml\n\n```xml\nspring:\n  datasource:\n    password: 123456\n    username: root\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm\n```\n\n\n\n## SpringBootMybatisAnnotationApplicationTests.java\n\n```java\npackage com.caicai.springbootmybatisannotation;\n\nimport com.caicai.springbootmybatisannotation.mapper.UserMapper;\nimport com.caicai.springbootmybatisannotation.pojo.User;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBootMybatisAnnotationApplicationTests {\n    @Autowired\n    UserMapper userMapper;\n   @Test\n    public void addUser(){\n        User user = new User();\n        user.setAge(10);\n        user.setName(\"caicai\");\n        userMapper.addUser(user);\n    }\n\n}\n```\n\n## 对比xml文件配置\n\n```java\n@Insert(\"insert into users(name,age) values(#{name},#{age})\")\npublic void addUser(User user);\n```\n\n@Insert注解的配置就相当于在UserMapper.xml中配置:","tags":["Spring Boot","Mybatis"]},{"title":"org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常处理","url":"/2019/03/31/org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常处理/","content":"\n在SpringBoot整合Mybatis出现org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): 错误\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 报错信息:\n\n```java\norg.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.caicai.springbootspringmvcmybatis.mapper.UsersMapper.insertUser\n\tat org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:232) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:50) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperProxy.lambda$cachedMapperMethod$0(MapperProxy.java:62) ~[mybatis-3.5.0.jar:3.5.0]\n\tat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) ~[na:1.8.0_201]\n\tat org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:62) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:57) ~[mybatis-3.5.0.jar:3.5.0]\n\tat com.sun.proxy.$Proxy56.insertUser(Unknown Source) ~[na:na]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl.addUser(UserServiceImpl.java:23) ~[classes/:na]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl$$FastClassBySpringCGLIB$$3b4656c9.invoke(<generated>) ~[classes/:na]\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl$$EnhancerBySpringCGLIB$$c9ef3195.addUser(<generated>) ~[classes/:na]\n\tat com.caicai.springbootspringmvcmybatis.controller.UserController.addUser(UserController.java:30) ~[classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_201]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_201]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]\n```\n\n\n\n## 解决\n\n经过研究,发现UsersMapper.xml文件在com.caicai.springbootspringmvcmybatis.mapper包里不会被编译,所以考虑在resources里创建一个mapper文件夹,并且在application.yml配置mybatis\n\n```xml\nmybatis:\n  type-aliases-package: com.caicai.springbootspringmvcmybatis.pojo\n  mapper-locations: classpath:mapper/*.xml\n\n```\n\n","tags":["Spring Boot","Mybatis"]},{"title":"JDBC连接Mysql8.0驱动版本过低报错","url":"/2019/03/29/JDBC连接Mysql8-0-11版本出现问题/","content":"\nJDBC连接Mysql8.0.11版本出现问题,不停循环报错 错误信息如下:\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 报错信息:\n\n```java\nFri Mar 29 21:39:01 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.\nERROR [Druid-ConnectionPool-Create-2085079540] - create connection SQLException, url: jdbc:mysql://localhost:3306/phone, errorCode 0, state 08001\ncom.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server.\n\tat sun.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n\tat com.mysql.jdbc.Util.getInstance(Util.java:387)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)\n\tat com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2332)\n\tat com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)\n\tat com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)\n\tat com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)\n\tat sun.reflect.GeneratedConstructorAccessor27.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n\tat com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)\n\tat com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1513)\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1578)\n\tat com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2451)\nCaused by: java.lang.NullPointerException\n\tat com.mysql.jdbc.ConnectionImpl.getServerCharset(ConnectionImpl.java:3005)\n\tat com.mysql.jdbc.MysqlIO.sendConnectionAttributes(MysqlIO.java:1916)\n\tat com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1845)\n\tat com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)\n\tat com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)\n\tat com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)\n\t... 12 more\n\n```\n\n\n\n## 解决方案:\n\nMysql是8.0版本的 ,但是项目中用的jdbc驱动包5.1.31,将jdbc驱动包改为8.0.13后不再报错","tags":["MYSQL"]},{"title":"Spring Boot 整合mybatis","url":"/2019/03/29/Spring-Boot-整合mybatis/","content":"\n Spring Boot 整合mybatis\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 创建项目   pom.xml中添加依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>12-spring-boot-springmvc-mybatis</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>12-spring-boot-springmvc-mybatis</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.8</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## 创建application.yml\n\n```xml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/ssm\n    type: com.alibaba.druid.pool.DruidDataSource\nmybatis:\n  type-aliases-package: com.caicai.springbootspringmvcmybatis.pojo\n  mapper-locations: classpath:mapper/*.xml\n```\n\n## 创建Users类\n\n```java\npackage com.caicai.springbootspringmvcmybatis.pojo;\n\npublic class Users {\n\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n\n```\n\n\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootspringmvcmybatis.controller;\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\nimport com.caicai.springbootspringmvcmybatis.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * @author liu\n * @title: Controller\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3113:01\n */\n@Controller\n@RequestMapping(\"/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    @RequestMapping(\"/{page}\")\n    public String showPage(@PathVariable String page){\n        return page;\n    }\n    @RequestMapping(\"/addUser\")\n    @ResponseBody\n    public String addUser(Users user){\n        userService.addUser(user);\n        return \"success\";\n    }\n}\n\n```\n\n## 创建 UserMapper接口和UsersMapper.xml(创建路径在resources/mapper下)\n\n```\npackage com.caicai.springbootspringmvcmybatis.mapper;\n\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\n\npublic interface UsersMapper {\n\t\n\tvoid insertUser(Users users);\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.caicai.springbootspringmvcmybatis.mapper.UsersMapper\">\n\t<insert id=\"insertUser\" parameterType=\"users\">\n\t\tinsert into users(name,age) values(#{name},#{age})\n\t</insert>\n</mapper>\n```\n\n## 创建Service\n\n```java\npackage com.caicai.springbootspringmvcmybatis.service;\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\n\n/**\n * @author liu\n * @title: UserService\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3112:16\n */\npublic interface UserService {\n    void addUser(Users users);\n}\n\n```\n\n```java\npackage com.caicai.springbootspringmvcmybatis.service;\n\nimport com.caicai.springbootspringmvcmybatis.mapper.UsersMapper;\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @author liu\n * @title: UserServiceImpl\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3112:25\n */\n@Service\n@Transactional\npublic class UserServiceImpl implements  UserService{\n    @Autowired\n    private UsersMapper usersMapper;\n    @Override\n    public void addUser(Users users) {\n        this.usersMapper.insertUser(users);\n    }\n}\n\n```\n\n## 创建page.html\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form th:action=\"@{/users/addUser}\" method=\"post\">\n用户姓名<input type=\"text\" name=\"name\"><br>\n用户年龄<input type=\"text\" name=\"age\"><br>\n<input type=\"submit\" th:value=\"确定\"><br>\n\n</form>\n\n</body>\n</html>\n```\n\n## 创建启动类:\n\n```java\npackage com.caicai.springbootspringmvcmybatis;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@MapperScan(\"com.caicai.springbootspringmvcmybatis.mapper\")\npublic class Application {\n\n   public static void main(String[] args) {\n      SpringApplication.run(Application.class, args);\n   }\n\n}\n```\n\n\n\n\n\n","tags":["Spring Boot","Mybatis"]},{"title":"thymeleaf的整合和使用","url":"/2019/03/29/thymeleaf基本语法/","content":"\nThymeleaf是用于Web和独立环境的现代服务器端Java模板引擎。Thymeleaf的主要目标是将优雅的自然模板带到您的开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。Thymeleaf能够处理HTML，XML，JavaScript，CSS甚至纯文本。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合thymeleaf\n\n## 修改pom.xml文件,添加依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>10-spring-boot-view-thymeleaf</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>10-spring-boot-view-thymeleaf</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## 编写视图:\n\n在templates/ 下建立 userList2.html:\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n<head>\n    <title>index</title>\n</head>\n<body>\n<table border=\"1\" align=\"center\" width=\"50%\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n\n    <tr th:each=\"user:${list}\">\n        <td th:text=\"${user.userid}\"></td>\n        <td th:text=\"${user.username}\"></td>\n        <td th:text=\"${user.userage}\"></td>\n    </tr>\n\n</table>\n</body>\n</html>\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    @RequestMapping(\"/showuser2\")\n    public String index(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList2\";\n    }\n}\n\n```\n\n## 创建Users类:\n\n```java\npackage com.caicai.springbootviewfreemarker.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n\n```\n\n## 创建启动类\n\n```java\npackage com.caicai.springbootviewfreemarker;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n\n\n# thymeleaf基本语法:\n\n## 变量输出与字符串操作\n\n### th:text\n\n在页面中输出值\n\n### th:value\n\n可以将一个值放入到 input 标签的 value 中\n\n### 判断字符串是否为空\nThymeleaf 内置对象\n注意语法：\n1，调用内置对象一定要用#\n2，大部分的内置对象都以 s 结尾 strings、numbers、dates\n\n```\n${#strings.isEmpty(key)}\n判断字符串是否为空，如果为空返回 true，否则返回 false\n${#strings.contains(msg,'T')}\n判断字符串是否包含指定的子串，如果包含返回 true，否则返回 false\n${#strings.startsWith(msg,'a')}\n判断当前字符串是否以子串开头，如果是返回 true，否则返回 false\n${#strings.endsWith(msg,'a')}\n判断当前字符串是否以子串结尾，如果是返回 true，否则返回 false\n${#strings.length(msg)}\n返回字符串的长度\n${#strings.indexOf(msg,'h')}\n查找子串的位置，并返回该子串的下标，如果没找到则返回-1\n${#strings.substring(msg,13)}\n${#strings.substring(msg,13,15)}\n截取子串，用户与 jdk String 类下 SubString 方法相同\n${#strings.toUpperCase(msg)}\n${#strings.toLowerCase(msg)}\n字符串转大小写。\n```\n\n\n\n## 日期格式化处理\n\n```\n${#dates.format(key)}\n格式化日期，默认的以浏览器默认语言为格式化标准\n${#dates.format(key,'yyy/MM/dd')}\n按照自定义的格式做日期转换\n${#dates.year(key)}\n${#dates.month(key)}\n${#dates.day(key)}\nyear：取年\nMonth：取月\nDay：取日    \n\n```\n\n## 条件判断\n\n### th:if\n\n```html\n<span th:if=\"${sex} == '男'\">\n    性别男\n</span>\n<span th:if=\"${sex} == '女'\">\n    性别女\n</span>\n```\n\n### th:switch\n\n```html\n<span th:switch=\"${id}\">\n    <span th:case=\"1\">ID 为1</span>\n    <span th:case=\"2\">ID 为2</span>\n    <span th:case=\"2\">ID 为3</span>\n</span>\n```\n\n## 迭代遍历\n\n```html\n<table border=\"1\" align=\"center\" width=\"50%\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n\n    <tr th:each=\"user:${list}\">\n        <td th:text=\"${user.userid}\"></td>\n        <td th:text=\"${user.username}\"></td>\n        <td th:text=\"${user.userage}\"></td>\n    </tr>\n\n</table>\n```\n\n```java\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"index\";\n\n    }\n```\n\n状态变量属性\n1,index:当前迭代器的索引 从 0 开始\n2,count:当前迭代对象的计数 从 1 开始\n3,size:被迭代对象的长度\n4,even/odd:布尔值，当前循环是否是偶数/奇数 从 0 开始\n5,first:布尔值，当前循环的是否是第一条，如果是返回 true 否则返回 false\n6,last:布尔值，当前循环的是否是最后一条，如果是则返回 true 否则返回 false\n\n### th:each 迭代Map\n\n```html\n<table border=\"1\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr th:each=\"maps : ${map}\">\n        <td th:text=\"${maps}\"></td>\n    </tr>\n</table>\n<th/>\n<table border=\"1\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr th:each=\"maps : ${map}\">\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.id}\" ></td>\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.name}\"></td>\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.age}\"></td>\n    </tr>\n</table>\n```\n\n```java\n\n    @RequestMapping(\"/index3\")\n    public String index3(Model model){\n        Map<String, User> map = new HashMap<>();\n        map.put(\"u1\", new User(1,\"张三\",20));\n        map.put(\"u2\", new User(2,\"李四\",22));\n        map.put(\"u3\", new User(3,\"王五\",24));\n        model.addAttribute(\"map\", map);\n        return \"index3\" ;\n    }\n```\n\n\n\n## 域对象操作\n\n```java\n    @RequestMapping(\"/index4\")\n    public String index4(HttpServletRequest httpServletRequest, Model model){\n        httpServletRequest.setAttribute(\"req\",\"HttpServletRequest\");\n        httpServletRequest.getSession().setAttribute(\"sess\",\"HttpSession\");\n        httpServletRequest.getSession().getServletContext().setAttribute(\"app\",\"Application\");\n        return \"index4\" ;\n    }\n```\n\n```html\n<body>\n<span th:text=\"${#httpServletRequest.getAttribute('req')}\"></span><br>\n<span th:text=\"${session.sess}\"></span><br>\n<span th:text=\"${application.app}\"></span><br>\n</body>\n```\n\n## URL表达式\n\nth:href\nth:src\n\n### URL表达式语法\n\n基本语法：@{}\n\n### URL类型\n\n#### 绝对路径\n\n```html\n<a th:href=\"@{http://www.baidu.com}\">绝对路径</a><br/>\n```\n\n#### 相对路径\n\n1)相对于当前项目的根\n相对于项目的上下文的相对路径\n\n```html\n<a th:href=\"@{/show}\">相对路径</a>\n```\n\n2) 相对于服务器路径的根\n\n```html\n<a th:href=\"@{~/project2/resourcename}\">相对于服务器的根</a>\n```\n\n### 在 url  中实现参数传递\n\n```html\n<a th:href=\"@{/show(id=1,name=zhagnsan)}\">相对路径-传参</a>\n```\n\n###   在 url  中通过 restful  风格进行参数传递\n\n```html\n<a th:href=\"@{/path/{id}/show(id=1,name=zhagnsan)}\"> 相 对 路 径 - 传 参\n-restful</a>\n```\n\n","tags":["Spring Boot","thymeleaf"]},{"title":"Spring Boot 整合Freemarker","url":"/2019/03/28/Spring-Boot-整合Freemarker/","content":"\nFreeMarker 是一个模板引擎，一个基于模板生成文本输出的通用工具，使用纯 Java 编写，FreeMarker 被设计用来生成 HTML Web 页面，特别是基于 MVC 模式的应用程序，虽然 FreeMarker 具有一些编程的能力，但通常由 Java 程序准备要显示的数据，由FreeMarker 生成页面，通过模板显示准备的数据。符合MVC模式，采用哈希表存储，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据\n\n\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Freemarker \n\n## 创建maven项目,添加依赖\n\n```xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-freemarker</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n```\n\n## 编写视图\n\n在templates/ 下建立 userList.ftl:\n\n```html\n<html>\n\t\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>显示用户数据</title>\n\t</head>\n\t<body>\n\t\t<table border=\"1\" align=\"center\" width=\"50%\">\n\t\t\t<tr>\n\t\t\t\t<th>ID</th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Age</th>\n\t\t\t</tr>\n\n            <#list list as user>\n                <tr>\n                    <td>${user.userid}</td>\n                    <td>${user.username}</td>\n                    <td>${user.userage}</td>\n                </tr>\n            </#list>\n\n\t\t</table>\n\t</body>\n</html>\n\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n## 创建Uesrs类\n\n```java\npackage com.caicai.springbootviewfreemarker.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n## 创建启动类\n\n```java\npackage com.caicai.springbootviewfreemarker;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n","tags":["Spring Boot"]},{"title":"Spring Boot 整合jsp","url":"/2019/03/28/Spring-Boot-整合jsp/","content":"\n Spring Boot 整合jsp\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 创建maven项目,添加pom依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>08-spring-boot-view-jsp</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>08-spring-boot-view-jsp</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n        <!-- tomcat支持 -->\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-jasper</artifactId>\n        </dependency>\n        <!-- jstl标签库 -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n        </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n\n\n## 创建SpringBoot全局配置\n\napplication.yml:\n\n```xml\nspring:\n  mvc:\n    view:\n      prefix: /WEB-INF/jsp/\n      suffix: .jsp\n```\n\n## 创建Users类\n\n```java\npackage com.caicai.springbootviewjsp.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:16\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewjsp.controller;\n\nimport com.caicai.springbootviewjsp.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:15\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n\n\n## 创建jsp\n\nuserList.jsp:\n\n```xml\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n         pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Insert title here</title>\n</head>\n<body>\n    <table border=\"1\" align=\"center\" width=\"50%\">\n        <tr>\n            <th>ID:</th>\n            <th>姓名:</th>\n            <th>年龄</th>\n\n        </tr>\n        <c:forEach items=\"${list}\" var=\"user\">\n        <tr>\n            <td>${user.userid}</td>\n            <td>${user.username}</td>\n            <td>${user.userage}</td>\n        </tr>\n\n\n        </c:forEach>\n    </table>\n</body>\n</html>\n```\n\n\n\n## 创建启动类:\n\n```java\npackage com.caicai.springbootviewjsp;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n\n\n## 效果图:\n\n![](/Spring-Boot-整合jsp/1.png)","tags":["Spring Boot"]},{"title":"Spring-Boot-文件上传","url":"/2019/03/27/Spring-Boot-文件上传/","content":"\nSpring-Boot-文件上传\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 编写Controller\n\n```java\npackage com.caicai.springbootstaticresources1.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FileController\n * @projectName 05-spring-boot-static-resources1\n * @description: TODO\n * @date 2019/3/2719:04\n */\n@RestController\npublic class FileController {\n\n    @RequestMapping(value = \"/fileUploadController\")\n    public String fileUpload(@RequestParam(\"filename\") MultipartFile file){\n        System.out.println(file.getName());\n        try {\n            file.transferTo(new File(\"F:/\"+file.getName()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"success\";\n    }\n}\n\n```\n\n## 编写上传界面\n\n为了方便在static文件夹下建立upload.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件上传</title>\n</head>\n<body>\n    <form action=\"fileUploadController\" method=\"post\" enctype=\"multipart/form-data\">\n        上传文件:<input type=\"file\" name=\"filename\">\n        <input type=\"submit\">\n    </form>\n</body>\n</html>\n```\n\n## 设置上传文件大小的默认值\n\n在resources下建立application.yml文件\n\n```xml\nspring:\n  servlet:\n    multipart:\n      max-file-size: 10MB   #设置单个上传文件的大小\n      max-request-size: 100MB  #设置一次请求上传文件的总容量\n      enabled: true\n```\n\n","tags":["Spring Boot"]},{"title":"Spring-Boot 整合Servlet和Filter","url":"/2019/03/27/Spring-Boot-整合Servlet/","content":"\nSpring-Boot 整合Servlet和Filter\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Servlet\n\n## 传统方式配置\n\n```xml\n\n<servlet>\n<servlet-name>FirstServlet</servlet-name>\n<servlet-class>com.caicai.springbootservlet.filter.FirstFilter</servlet-class>\n</servlet>\n\n<servlet-mapping>\n<servlet-name>FirstServlet</servlet-name>\n<url-pattern>/first</url-pattern>\n</servlet-mapping>\n\n```\n\n## 通过注解扫描注册Servlet\n\n使用@WebServlet注解并在启动类上使用@ServletComponentScan注解\n\n```java\n@WebServlet(name = \"FirstServlet\",urlPatterns = \"/first\")\npublic class FirstServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"FirstServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n```\n\n## 通过方法完成Servlet组件的注册\n\n通过使用@Bean注解的形式注册组件\n\n```java\npublic class SecondServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"SecondServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\npublic class App2 {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public ServletRegistrationBean getServletRegistrationBean() {\n        ServletRegistrationBean bean = new ServletRegistrationBean(new SecondServlet());\n        bean.addUrlMappings(\"/second\");//添加url路径\n        return bean;\n    }\n}\n```\n\n\n\n\n\n# 整合Filter\n\n## 传统方式配置\n\n```xml\n<filter>\n<filter-name>FirstFilter</filter-name>\n<filter-class>com.caicai.springbootservlet.filter.FirstFilter</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>FirstFilter</filter-name>\n<url-pattern>/filter1</url-pattern>\n</filter-mapping>\n\n```\n\n\n\n## 通过注解扫描注册Servlet\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FirstFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n//@WebFilter(filterName = \"\",urlPatterns ={\"*.do\",\"*.jsp\"})\n@WebFilter(filterName = \"FirstFilter\",urlPatterns =\"/filter1\")\npublic class FirstFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n启动类:\n\n````java\npackage com.caicai.springbootservlet;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\n\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class App3 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App3.class, args);\n\t}\n\n}\n\n````\n\n## 通过方法完成Filter的注册\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: SecondFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n\npublic class SecondFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter2.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter2.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n```java\npackage com.caicai.springbootservlet;\n\nimport com.caicai.springbootservlet.filter.SecondFilter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class App4 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App4.class, args);\n\t}\n\n\t@Bean\n\tpublic FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean bean = new FilterRegistrationBean(new SecondFilter()) ;\n        bean.addUrlPatterns(\"/filter2\");\n        return bean;\n    }\n\n}\n```\n\n","tags":["Spring Boot","Servlet"]},{"title":"String，StringBuilder，StringBuffer三者的区别","url":"/2019/03/26/string相关/","content":"\n最近突然被问起String，StringBuilder，StringBuffer三者的区别,发现自己确实对这方面的知识不是很了解.所以学习了一下做个笔记.\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## String\n\n+ String 类是一个常量，String类本身和其中存储字符的数组都是用final关键字修饰的,所以不能被继承\n\n```java\n    /** The value is used for character storage. */\n    private final char value[];\n```\n\n### String str=\"hello world\"和String str=new String(\"hello world\")的区别\n\n\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string1 = \"hello word\";\n        String string2 = new String(\"hello world\");\n        String string3 = \"hello word\";\n        String string4 = new String(\"hello world\");\n        System.out.println(string1 == string2);\n        System.out.println(string1 == string3);\n        System.out.println(string2 == string4);\n    }\n}\n\n```\n\n上面代码的输出结果为:\n\nfalse\n\ntrue\n\nfalse\n\n我们发现 同样都都是\"helllo world\" string1 和 string3 相等.是因为string1 和 string3 都是赋值为一个字面常量\"hello world\",在JVM运行时候,会在常量池里寻找是否已经存在相同的常量,如果存在便直接将引用指向已有常量,否则就创建一个常量,并且将引用指向他,对于string2 和string4来说,两者都是采取了new 来创建的,是两个不同的对象,所以不相等.\n\n## StringBuilder\n\n\n\n在第二点中,我们看到String是一个final类,打开StringBuilder,我们发现StringBuilder类是AbstractStringBuilder的子类,在AbstractStringBuilder类中,我们看到与String不同,StringBuilder存储字符的数组是可变的\n\n```java\n  /**\n     * The value is used for character storage.\n     */\n    char[] value;\n```\n\n## StringBuilder和String 区别\n\n\n\n对于实际应用来说 假设有如下代码\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string = \"\";\n        for (int i = 0; i < 1000; i++) {\n            string += \"A\";\n        }\n\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 1000; i++) {\n            stringBuilder.append(\"A\");\n        }\n    }\n}\n\n```\n\n上述代码进行了一个1000次的循环,每次在字符串string后面追加一个字符A,无论使用的是String,还是StringBuilder,最后的结果都为长度为1000的字符全为A的字符串.而不同的是,如果使用StringBuilder,append操作是在原有的对象基础上进行的,而使用String每次循环都会新建一个StringBuilder对象,进行append操作,通过toString方法返回String对象,如果这些对象没有被回收会浪费大量资源,\n\n## StringBuilder和StringBuffer区别\n\n对比StringBuilder和StringBuffer源码,我们发现在StringBuffer中很多方法都加上了synchronized关键字,所以StringBuffer是线程安全的,不过相应的,在提升了安全的同时对资源的消耗也会增大\n\n```java\n        /**\n         * StringBuffer append方法\n         */\n        @Override\n        public synchronized StringBuffer append (String str){\n            toStringCache = null;\n            super.append(str);\n            return this;\n        }\n        \n        /**\n         * StringBuilder append方法\n         */\n\n        @Override\n        public StringBuilder append (String str){\n            super.append(str);\n            return this;\n        }\n```\n\n## 结论\n\n三个类应当根据不同的情况来进行选择使用：\n\n当字符串相加操作或者改动较少的情况下，建议使用 String str=\"hello\"这种形式\n\n当字符串相加操作较多的情况下，建议使用StringBuilder\n\n如果采用了多线程，则使用StringBuffer。\n\n","tags":["java","String"]},{"title":"swagger2简介","url":"/2019/03/19/swagger2简介/","content":"\nSwagger 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 关于Swagger\n\n\n\nSwagger能成为最受欢迎的REST APIs文档生成工具之一，有以下几个原因：\n\n- Swagger 可以生成一个具有互动性的API控制台，开发者可以用来快速学习和尝试API。\n- Swagger 可以生成客户端SDK代码用于各种不同的平台上的实现。\n- Swagger 文件可以在许多不同的平台上从代码注释中自动生成。\n- Swagger 有一个强大的社区，里面有许多强悍的贡献者。\n\nSwagger 文档提供了一个方法，使我们可以用指定的 JSON 或者 YAML 摘要来描述你的 API，包括了比如 names、order 等 API 信息。\n\n你可以通过一个文本编辑器来编辑 Swagger 文件，或者你也可以从你的代码注释中自动生成。各种工具都可以使用 Swagger 文件来生成互动的 API 文档。\n\n> 注意：用 Swagger 文件生成互动的 API 文档是最精简的，它展示了资源、参数、请求、响应。但是它不会提供你的API如何工作的其他任何一个细节。\n\n## Spring Boot集成使用Swagger\n\n### 创建Spring Boot Web工程并且引入Swagger依赖\n\n所需Swagger依赖可以在[Maven仓库](https://mvnrepository.com/) 中找查询\n\n```xml\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n```\n\n### 创建User实体类\n\n```java\npackage com.example.demo.domain;\n\n/**\n * @author liu\n * @title: User\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:52\n */\npublic class User {\n    private Long id;\n    private String username;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                '}';\n    }\n}\n\n```\n\n### 在启动类目录创建Swagger2配置类\n\n```java\npackage com.example.demo;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2  {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.controller\"))//扫描controller下的包\n                .paths(PathSelectors.any())\n                .build();\n    }\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .description(\"swagger2 构建APIS\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n### 创建UserController类\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.domain.User;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author liu\n * @title: HelloController\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:48\n */\n@RestController\n@Api(tags = \"用户模块\")\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    /**\n     * 此处为了方便直接用一个Map来模拟数据库进行操作\n     */\n    static Map<Long, User> userMap;\n\n    static {\n        userMap = new HashMap<>();\n        User user = new User();\n        user.setId((long) 10000);\n        user.setUsername(\"admin\");\n        userMap.put((long) 10000,user);\n    }\n\n    @ApiOperation(value = \"获取用户列表\")\n    @RequestMapping(value = \"list\", method = RequestMethod.GET)\n    public List<User> getUserList() {\n\n        return new ArrayList<User>(userMap.values());\n    }\n\n\n    @ApiOperation(value = \"创建用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.POST)\n    public String postUser(User user) {\n\n        userMap.put(user.getId(),user);\n        return \"添加成功\";\n    }\n\n\n\n    @ApiOperation(value = \"获取用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.GET)\n    public User getUser(@RequestParam(\"id\") Long id) {\n        System.out.println(id);\n        return userMap.get(id);\n    }\n\n\n\n    @ApiOperation(value = \"更新用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.PUT)\n    public String putUser(User user) {\n        userMap.put(user.getId(),user);\n        return \"更新成功\";\n    }\n\n\n    @ApiOperation(value = \"删除用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.DELETE)\n    public String deleteUser(@RequestParam(\"id\") Long id) {\n        userMap.remove(id);\n        return \"删除成功\";\n    }\n}\n\n```\n\n### 测试:\n\n主界面:\n\n![主界面](/swagger2简介/1.png)\n\n查询用户列表:\n\n![](/swagger2简介/2.png)\n\n创建用户:\n\n![](/swagger2简介/3.png)\n\n获取用户:\n\n![](/swagger2简介/4.png)\n\n删除用户:\n\n![](/swagger2简介/5.png)\n\n## 使用过程中遇到的问题\n\n(1)java.lang.NumberFormatException: For input string: \"\"\n\n在使用@ApiModelProperty注解在字段上时，如果字段的类型为Long或是int类型，那么程序启动后，访问swagger-ui.html的页面，程序会报错\n\njava.lang.NumberFormatException: For input string: \"\"\n在swagger的官方文档中介绍是一个bug；可以忽略这个错误，如果看着不爽，可以调整日志的级别\n\napplication.yml:\n\n```xml\nlogging:\n  level:\n    io.swagger.models.parameters.AbstractSerializableParameter: error\n```\n\n\n\n(2)@Api()注解中使用tags = \"\"参数才能改变api名字 例如@Api(tags = \"用户模块\")\n\n\n\n(3)requestparam 和pathvariable区别 :\n\n@PathVariable:从路径路去获取变量,也就是把路径名当作变量 例如:\n\n```xml\nhttp://localhost:8080/user?id=5\n```\n\n@RequestParam:从请求里面获取参数,例如:\n\n```xml\nhttp://localhost:8080/user?5\n```\n\n","tags":["Spring Boot","swagger"]},{"title":"mysql的时区错误问题： The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one","url":"/2019/03/18/mysql的时区错误问题：-The-server-time-zone-value-OÐ¹u±e×¼E±¼a-is-unrecognized-or-represents-more-than-one/","content":"\n链接数据库时候出现cexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException:\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## spring boot 链接数据库的时候报错\n\n```java\ncexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \n### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n### The error may exist in com/wj/mapper/UserLoginMapper.xml\n### The error may involve com.wj.mapper.UserLoginMapper.selectByName\n### The error occurred while executing a query\n### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)\n    org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:650)\n    org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n```\n```java\njava.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:127)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:95)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:87)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:61)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:71)\n    com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76)\n    com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:862)\n    com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:444)\n    com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:230)\n    com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:226)\n    com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:175)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:220)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:206)\n    com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:203)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1138)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess(BasicResourcePool.java:1125)\n    com.mchange.v2.resourcepool.BasicResourcePool.access$700(BasicResourcePool.java:44)\n    com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask.run(BasicResourcePool.java:1870)\n    com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:696)\n```\n## 解决方案:\n\n据查询是因为电脑的时区和mysql的时区不一样导致的\n用 打开mysql \n\n```sql\nshow variables like '%time_zone%'; //查询mysql的时区\nset global time_zone='+8:00'; //设置时区\n```","tags":["MYSQL","Spring Boot"]},{"title":"navicat 连接 mysql   Client does not support authentication protocol requested by server","url":"/2019/03/18/navicat-连接-mysql-Client-does-not-support-authentication-protocol-requested-by-server/","content":"\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 报错信息:\n\n```java\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n```\n\n## 解决方案:\n\n打开mysql的MySQL Command Line Client 输入:\n```\nUSE mysql;\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';\nFLUSH PRIVILEGES; \n```\n\nlocalhost:本机地址\n123456:要设置的密码","tags":["MYSQL"]},{"title":"hexo 常用命令","url":"/2019/03/18/hexo-常用命令/","content":"\nhexo 的一些常用命令\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## hexo\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n```\n\n## 简写\n\n`hexo n \"我的博客\"` == `hexo new \"我的博客\"` #新建文章\n`hexo p` == `hexo publish`\n`hexo g` == `hexo generate`#生成\n`hexo s` == `hexo server` #启动服务预览\n`hexo d` == `hexo deploy`#部署\n\n## 服务器\n\n`hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n`hexo server -s` #静态模式\n`hexo server -p 5000` #更改端口\n`hexo server -i 192.168.1.1` #自定义 IP\n\n`hexo clean` #清除缓存 网页正常情况下可以忽略此条命令\n`hexo g` #生成静态网页\n`hexo d` #开始部署\n\n### 监视文件变动\n\n`hexo generate` #使用 Hexo 生成静态文件快速而且简单\n`hexo generate --watch` #监视文件变动\n\n### 完成后部署\n\n> 两个命令的作用是相同的\n> `hexo generate --deploy`\n> `hexo deploy --generate`\n\n```\nhexo deploy -g`\n`hexo server -g\n```\n\n## 草稿\n\n```\nhexo publish [layout] <title>\n```\n\n## 模版\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n`hexo deploy` #将.deploy目录部署到GitHub\n\n```\nhexo new [layout] <title>`\n`hexo new photo \"My Gallery\"`\n`hexo new \"Hello World\" --lang tw\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n```\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2019-03-18 14:59:30\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n## 模版（Scaffold）\n\n```\nhexo new photo \"My Gallery\"\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n## 设置文章摘要\n\n```\n以上是文章摘要 <!--more--> 以下是余下全文 \n```\n\n## 写作\n\n```\nhexo new page <title>`\n`hexo new post <title>\n```\n\n| 变量     | 描述                       |\n| -------- | -------------------------- |\n| :title   | 标题                       |\n| :year    | 建立的年份（4 位数）       |\n| :month   | 建立的月份（2 位数）       |\n| :i_month | 建立的月份（去掉开头的零） |\n| :day     | 建立的日期（2 位数）       |\n| :i_day   | 建立的日期（去掉开头的零） |\n\n### 推送到服务器上\n\n```\nhexo n` #写文章\n`hexo g` #生成\n`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g\n```\n\n## 报错\n\n### 1.找不到git部署\n\n```\nERROR Deployer not found: git\n```\n\n**解决方法**\n\n```\nnpm install hexo-deployer-git --save\n```\n\n### 3.部署类型设置git\n\nhexo 3.0 部署类型不再是`github`，`_config.yml` 中修改\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n```\n\n### 4. xcodebuild\n\nxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n\n```\nnpm install bcrypt\n```\n\n### 5. RSS不显示\n\n#### 安装RSS插件\n\n```\nnpm install hexo-generator-feed --save\n```\n\n#### 开启RSS功能\n\n编辑hexo/_config.yml，添加如下代码：\n\n```\nrss: /atom.xml #rss地址  默认即可\n```","tags":["hexo"]}]