[{"title":"Spring Boot Jpa","url":"/2019/03/31/Spring-Boot-Jpa/","content":"\n  全称Java Persistence API，通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。\n\n​     JPA的出现有两个原因：\n 其一，简化现有Java EE和Java SE应用的对象持久化的开发工作；\n 其二，Sun希望整合对ORM技术，实现持久化领域的统一。\n\n​     JPA提供的技术：\n\n 1）ORM映射元数据：JPA支持XML和JDK 5.0注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中；\n\n 2）JPA 的API：用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的事情，开发者从繁琐的JDBC和SQL代码中解脱出来。\n\n 3）查询语言：通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## pom.xml中导入依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-parent</artifactId>\n      <version>2.1.3.RELEASE</version>\n      <relativePath/> <!-- lookup parent from repository -->\n   </parent>\n   <groupId>com.caicai</groupId>\n   <artifactId>spring-boot-jpa</artifactId>\n   <version>0.0.1-SNAPSHOT</version>\n   <name>spring-boot-jpa</name>\n   <description>Demo project for Spring Boot</description>\n\n   <properties>\n      <java.version>1.8</java.version>\n   </properties>\n\n   <dependencies>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-data-jpa</artifactId>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-jdbc</artifactId>\n      </dependency>\n\n      <dependency>\n         <groupId>mysql</groupId>\n         <artifactId>mysql-connector-java</artifactId>\n         <scope>runtime</scope>\n      </dependency>\n      <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-test</artifactId>\n         <scope>test</scope>\n      </dependency>\n   </dependencies>\n\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n         </plugin>\n      </plugins>\n   </build>\n\n</project>\n```\n\n## 创建实体类\n\n```java\npackage com.caicai.springbootjpa.entity;\n\nimport javax.persistence.*;\n\n/**\n * @author liu\n * @title: User\n * @projectName spring-boot-jpa\n * @description: TODO\n * @date 2019/3/3121:14\n */\n\n@Entity\npublic class User {\n    @GeneratedValue(strategy = GenerationType.AUTO)//设置自增长策略\n    @Id\n    private Integer id;\n    @Column(length = 20,nullable = false)  //column可以设置属性\n    private String name;\n    @Column(length = 20,nullable = true)\n    private Integer age;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public User() {\n    }\n\n    public User(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n```\n\n\n\n## 创建UserRepository\n\n```java\npackage com.caicai.springbootjpa.repository;\n\nimport com.caicai.springbootjpa.entity.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\n/**\n * @author liu\n * @title: UserRepository\n * @projectName spring-boot-jpa\n * @description: TODO\n * @date 2019/3/3121:06\n */\npublic interface UserRepository extends JpaRepository<User,Integer>{\n}\n\n```\n\n## 配置数据源和自动建表:\n\n```xml\nspring:\n  datasource:\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/jpa\n    driver-class-name: com.mysql.jdbc.Driver\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n```\n\n\n\n## 测试类:\n\n```java\npackage com.caicai.springbootjpa;\n\nimport com.caicai.springbootjpa.entity.User;\nimport com.caicai.springbootjpa.repository.UserRepository;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBootJpaApplicationTests {\n    @Autowired\n    UserRepository userRepository;\n\t@Test\n\tpublic void test() {\n\t    User user = new User();\n\t    user.setAge(10);\n\t    user.setName(\"caicai\");\n\t    userRepository.save(user);\n\t}\n\n}\n```\n\n","tags":["Spring Boot"]},{"title":"Spring Boot 整合Mybatis(基于注解)","url":"/2019/03/31/Spring-Boot-整合Mybatis-基于注解/","content":"\n基于注解的Spring Boot 整合Mybatis\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 项目结构\n\n![](Spring-Boot-整合Mybatis-基于注解\\1.png)\n\n## pom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>spring-boot-mybatis-annotation</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>spring-boot-mybatis-annotation</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-jdbc</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## UserMapper.java\n\n```java\npackage com.caicai.springbootmybatisannotation.mapper;\n\nimport com.caicai.springbootmybatisannotation.pojo.User;\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * @author liu\n * @title: UserMapper\n * @projectName spring-boot-mybatis-annotation\n * @description: TODO\n * @date 2019/3/3120:16\n */\n@Mapper\npublic interface UserMapper {\n    @Insert(\"insert into users(name,age) values(#{name},#{age})\")\n    public void addUser(User user);\n\n}\n```\n\n\n\n## User.java\n\n```java\npackage com.caicai.springbootmybatisannotation.pojo;\n\n/**\n * @author liu\n * @title: User\n * @projectName spring-boot-mybatis-annotation\n * @description: TODO\n * @date 2019/3/3120:16\n */\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public User() {\n    }\n\n    public User(Integer id, String name, Integer age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n```\n\n\n\n## application.yml\n\n```xml\nspring:\n  datasource:\n    password: 123456\n    username: root\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm\n```\n\n\n\n## SpringBootMybatisAnnotationApplicationTests.java\n\n```java\npackage com.caicai.springbootmybatisannotation;\n\nimport com.caicai.springbootmybatisannotation.mapper.UserMapper;\nimport com.caicai.springbootmybatisannotation.pojo.User;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SpringBootMybatisAnnotationApplicationTests {\n    @Autowired\n    UserMapper userMapper;\n   @Test\n    public void addUser(){\n        User user = new User();\n        user.setAge(10);\n        user.setName(\"caicai\");\n        userMapper.addUser(user);\n    }\n\n}\n```\n\n## 对比xml文件配置\n\n```java\n@Insert(\"insert into users(name,age) values(#{name},#{age})\")\npublic void addUser(User user);\n```\n\n@Insert注解的配置就相当于在UserMapper.xml中配置:","tags":["Spring Boot","Mybatis"]},{"title":"org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)异常处理","url":"/2019/03/31/org-apache-ibatis-binding-BindingException-Invalid-bound-statement-not-found-异常处理/","content":"\n在SpringBoot整合Mybatis出现org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): 错误\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n\n## 报错信息:\n\n```java\norg.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.caicai.springbootspringmvcmybatis.mapper.UsersMapper.insertUser\n\tat org.apache.ibatis.binding.MapperMethod$SqlCommand.<init>(MapperMethod.java:232) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperMethod.<init>(MapperMethod.java:50) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperProxy.lambda$cachedMapperMethod$0(MapperProxy.java:62) ~[mybatis-3.5.0.jar:3.5.0]\n\tat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) ~[na:1.8.0_201]\n\tat org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:62) ~[mybatis-3.5.0.jar:3.5.0]\n\tat org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:57) ~[mybatis-3.5.0.jar:3.5.0]\n\tat com.sun.proxy.$Proxy56.insertUser(Unknown Source) ~[na:na]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl.addUser(UserServiceImpl.java:23) ~[classes/:na]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl$$FastClassBySpringCGLIB$$3b4656c9.invoke(<generated>) ~[classes/:na]\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294) ~[spring-tx-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) ~[spring-aop-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat com.caicai.springbootspringmvcmybatis.service.UserServiceImpl$$EnhancerBySpringCGLIB$$c9ef3195.addUser(<generated>) ~[classes/:na]\n\tat com.caicai.springbootspringmvcmybatis.controller.UserController.addUser(UserController.java:30) ~[classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) ~[tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_201]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_201]\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.16.jar:9.0.16]\n\tat java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]\n```\n\n\n\n## 解决\n\n经过研究,发现UsersMapper.xml文件在com.caicai.springbootspringmvcmybatis.mapper包里不会被编译,所以考虑在resources里创建一个mapper文件夹,并且在application.yml配置mybatis\n\n```xml\nmybatis:\n  type-aliases-package: com.caicai.springbootspringmvcmybatis.pojo\n  mapper-locations: classpath:mapper/*.xml\n\n```\n\n","tags":["Spring Boot","Mybatis"]},{"title":"JDBC连接Mysql8.0驱动版本过低报错","url":"/2019/03/29/JDBC连接Mysql8-0-11版本出现问题/","content":"\nJDBC连接Mysql8.0.11版本出现问题,不停循环报错 错误信息如下:\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 报错信息:\n\n```java\nFri Mar 29 21:39:01 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.\nERROR [Druid-ConnectionPool-Create-2085079540] - create connection SQLException, url: jdbc:mysql://localhost:3306/phone, errorCode 0, state 08001\ncom.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server.\n\tat sun.reflect.GeneratedConstructorAccessor36.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n\tat com.mysql.jdbc.Util.getInstance(Util.java:387)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)\n\tat com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)\n\tat com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2332)\n\tat com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2085)\n\tat com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)\n\tat com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)\n\tat sun.reflect.GeneratedConstructorAccessor27.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n\tat com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)\n\tat com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1513)\n\tat com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1578)\n\tat com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2451)\nCaused by: java.lang.NullPointerException\n\tat com.mysql.jdbc.ConnectionImpl.getServerCharset(ConnectionImpl.java:3005)\n\tat com.mysql.jdbc.MysqlIO.sendConnectionAttributes(MysqlIO.java:1916)\n\tat com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1845)\n\tat com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)\n\tat com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)\n\tat com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2286)\n\t... 12 more\n\n```\n\n\n\n## 解决方案:\n\nMysql是8.0版本的 ,但是项目中用的jdbc驱动包5.1.31,将jdbc驱动包改为8.0.13后不再报错","tags":["MYSQL"]},{"title":"Spring Boot 整合mybatis","url":"/2019/03/29/Spring-Boot-整合mybatis/","content":"\n Spring Boot 整合mybatis\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 创建项目   pom.xml中添加依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>12-spring-boot-springmvc-mybatis</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>12-spring-boot-springmvc-mybatis</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.0.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.8</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## 创建application.yml\n\n```xml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    username: root\n    password: 123456\n    url: jdbc:mysql://localhost:3306/ssm\n    type: com.alibaba.druid.pool.DruidDataSource\nmybatis:\n  type-aliases-package: com.caicai.springbootspringmvcmybatis.pojo\n  mapper-locations: classpath:mapper/*.xml\n```\n\n## 创建Users类\n\n```java\npackage com.caicai.springbootspringmvcmybatis.pojo;\n\npublic class Users {\n\n    private Integer id;\n    private String name;\n    private Integer age;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n\n```\n\n\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootspringmvcmybatis.controller;\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\nimport com.caicai.springbootspringmvcmybatis.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n/**\n * @author liu\n * @title: Controller\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3113:01\n */\n@Controller\n@RequestMapping(\"/users\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    @RequestMapping(\"/{page}\")\n    public String showPage(@PathVariable String page){\n        return page;\n    }\n    @RequestMapping(\"/addUser\")\n    @ResponseBody\n    public String addUser(Users user){\n        userService.addUser(user);\n        return \"success\";\n    }\n}\n\n```\n\n## 创建 UserMapper接口和UsersMapper.xml(创建路径在resources/mapper下)\n\n```\npackage com.caicai.springbootspringmvcmybatis.mapper;\n\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\n\npublic interface UsersMapper {\n\t\n\tvoid insertUser(Users users);\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.caicai.springbootspringmvcmybatis.mapper.UsersMapper\">\n\t<insert id=\"insertUser\" parameterType=\"users\">\n\t\tinsert into users(name,age) values(#{name},#{age})\n\t</insert>\n</mapper>\n```\n\n## 创建Service\n\n```java\npackage com.caicai.springbootspringmvcmybatis.service;\n\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\n\n/**\n * @author liu\n * @title: UserService\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3112:16\n */\npublic interface UserService {\n    void addUser(Users users);\n}\n\n```\n\n```java\npackage com.caicai.springbootspringmvcmybatis.service;\n\nimport com.caicai.springbootspringmvcmybatis.mapper.UsersMapper;\nimport com.caicai.springbootspringmvcmybatis.pojo.Users;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @author liu\n * @title: UserServiceImpl\n * @projectName 12-spring-boot-springmvc-mybatis\n * @description: TODO\n * @date 2019/3/3112:25\n */\n@Service\n@Transactional\npublic class UserServiceImpl implements  UserService{\n    @Autowired\n    private UsersMapper usersMapper;\n    @Override\n    public void addUser(Users users) {\n        this.usersMapper.insertUser(users);\n    }\n}\n\n```\n\n## 创建page.html\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form th:action=\"@{/users/addUser}\" method=\"post\">\n用户姓名<input type=\"text\" name=\"name\"><br>\n用户年龄<input type=\"text\" name=\"age\"><br>\n<input type=\"submit\" th:value=\"确定\"><br>\n\n</form>\n\n</body>\n</html>\n```\n\n## 创建启动类:\n\n```java\npackage com.caicai.springbootspringmvcmybatis;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n@MapperScan(\"com.caicai.springbootspringmvcmybatis.mapper\")\npublic class Application {\n\n   public static void main(String[] args) {\n      SpringApplication.run(Application.class, args);\n   }\n\n}\n```\n\n\n\n\n\n","tags":["Spring Boot","Mybatis"]},{"title":"thymeleaf的整合和使用","url":"/2019/03/29/thymeleaf基本语法/","content":"\nThymeleaf是用于Web和独立环境的现代服务器端Java模板引擎。Thymeleaf的主要目标是将优雅的自然模板带到您的开发工作流程中—HTML能够在浏览器中正确显示，并且可以作为静态原型，从而在开发团队中实现更强大的协作。Thymeleaf能够处理HTML，XML，JavaScript，CSS甚至纯文本。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合thymeleaf\n\n## 修改pom.xml文件,添加依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>10-spring-boot-view-thymeleaf</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>10-spring-boot-view-thymeleaf</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n## 编写视图:\n\n在templates/ 下建立 userList2.html:\n\n```html\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3\">\n<head>\n    <title>index</title>\n</head>\n<body>\n<table border=\"1\" align=\"center\" width=\"50%\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n\n    <tr th:each=\"user:${list}\">\n        <td th:text=\"${user.userid}\"></td>\n        <td th:text=\"${user.username}\"></td>\n        <td th:text=\"${user.userage}\"></td>\n    </tr>\n\n</table>\n</body>\n</html>\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    @RequestMapping(\"/showuser2\")\n    public String index(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList2\";\n    }\n}\n\n```\n\n## 创建Users类:\n\n```java\npackage com.caicai.springbootviewfreemarker.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n\n```\n\n## 创建启动类\n\n```java\npackage com.caicai.springbootviewfreemarker;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n\n\n# thymeleaf基本语法:\n\n## 变量输出与字符串操作\n\n### th:text\n\n在页面中输出值\n\n### th:value\n\n可以将一个值放入到 input 标签的 value 中\n\n### 判断字符串是否为空\nThymeleaf 内置对象\n注意语法：\n1，调用内置对象一定要用#\n2，大部分的内置对象都以 s 结尾 strings、numbers、dates\n\n```\n${#strings.isEmpty(key)}\n判断字符串是否为空，如果为空返回 true，否则返回 false\n${#strings.contains(msg,'T')}\n判断字符串是否包含指定的子串，如果包含返回 true，否则返回 false\n${#strings.startsWith(msg,'a')}\n判断当前字符串是否以子串开头，如果是返回 true，否则返回 false\n${#strings.endsWith(msg,'a')}\n判断当前字符串是否以子串结尾，如果是返回 true，否则返回 false\n${#strings.length(msg)}\n返回字符串的长度\n${#strings.indexOf(msg,'h')}\n查找子串的位置，并返回该子串的下标，如果没找到则返回-1\n${#strings.substring(msg,13)}\n${#strings.substring(msg,13,15)}\n截取子串，用户与 jdk String 类下 SubString 方法相同\n${#strings.toUpperCase(msg)}\n${#strings.toLowerCase(msg)}\n字符串转大小写。\n```\n\n\n\n## 日期格式化处理\n\n```\n${#dates.format(key)}\n格式化日期，默认的以浏览器默认语言为格式化标准\n${#dates.format(key,'yyy/MM/dd')}\n按照自定义的格式做日期转换\n${#dates.year(key)}\n${#dates.month(key)}\n${#dates.day(key)}\nyear：取年\nMonth：取月\nDay：取日    \n\n```\n\n## 条件判断\n\n### th:if\n\n```html\n<span th:if=\"${sex} == '男'\">\n    性别男\n</span>\n<span th:if=\"${sex} == '女'\">\n    性别女\n</span>\n```\n\n### th:switch\n\n```html\n<span th:switch=\"${id}\">\n    <span th:case=\"1\">ID 为1</span>\n    <span th:case=\"2\">ID 为2</span>\n    <span th:case=\"2\">ID 为3</span>\n</span>\n```\n\n## 迭代遍历\n\n```html\n<table border=\"1\" align=\"center\" width=\"50%\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n\n    <tr th:each=\"user:${list}\">\n        <td th:text=\"${user.userid}\"></td>\n        <td th:text=\"${user.username}\"></td>\n        <td th:text=\"${user.userage}\"></td>\n    </tr>\n\n</table>\n```\n\n```java\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"index\";\n\n    }\n```\n\n状态变量属性\n1,index:当前迭代器的索引 从 0 开始\n2,count:当前迭代对象的计数 从 1 开始\n3,size:被迭代对象的长度\n4,even/odd:布尔值，当前循环是否是偶数/奇数 从 0 开始\n5,first:布尔值，当前循环的是否是第一条，如果是返回 true 否则返回 false\n6,last:布尔值，当前循环的是否是最后一条，如果是则返回 true 否则返回 false\n\n### th:each 迭代Map\n\n```html\n<table border=\"1\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr th:each=\"maps : ${map}\">\n        <td th:text=\"${maps}\"></td>\n    </tr>\n</table>\n<th/>\n<table border=\"1\">\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Age</th>\n    </tr>\n    <tr th:each=\"maps : ${map}\">\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.id}\" ></td>\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.name}\"></td>\n        <td th:each=\"entry:${maps}\"\n            th:text=\"${entry.value.age}\"></td>\n    </tr>\n</table>\n```\n\n```java\n\n    @RequestMapping(\"/index3\")\n    public String index3(Model model){\n        Map<String, User> map = new HashMap<>();\n        map.put(\"u1\", new User(1,\"张三\",20));\n        map.put(\"u2\", new User(2,\"李四\",22));\n        map.put(\"u3\", new User(3,\"王五\",24));\n        model.addAttribute(\"map\", map);\n        return \"index3\" ;\n    }\n```\n\n\n\n## 域对象操作\n\n```java\n    @RequestMapping(\"/index4\")\n    public String index4(HttpServletRequest httpServletRequest, Model model){\n        httpServletRequest.setAttribute(\"req\",\"HttpServletRequest\");\n        httpServletRequest.getSession().setAttribute(\"sess\",\"HttpSession\");\n        httpServletRequest.getSession().getServletContext().setAttribute(\"app\",\"Application\");\n        return \"index4\" ;\n    }\n```\n\n```html\n<body>\n<span th:text=\"${#httpServletRequest.getAttribute('req')}\"></span><br>\n<span th:text=\"${session.sess}\"></span><br>\n<span th:text=\"${application.app}\"></span><br>\n</body>\n```\n\n## URL表达式\n\nth:href\nth:src\n\n### URL表达式语法\n\n基本语法：@{}\n\n### URL类型\n\n#### 绝对路径\n\n```html\n<a th:href=\"@{http://www.baidu.com}\">绝对路径</a><br/>\n```\n\n#### 相对路径\n\n1)相对于当前项目的根\n相对于项目的上下文的相对路径\n\n```html\n<a th:href=\"@{/show}\">相对路径</a>\n```\n\n2) 相对于服务器路径的根\n\n```html\n<a th:href=\"@{~/project2/resourcename}\">相对于服务器的根</a>\n```\n\n### 在 url  中实现参数传递\n\n```html\n<a th:href=\"@{/show(id=1,name=zhagnsan)}\">相对路径-传参</a>\n```\n\n###   在 url  中通过 restful  风格进行参数传递\n\n```html\n<a th:href=\"@{/path/{id}/show(id=1,name=zhagnsan)}\"> 相 对 路 径 - 传 参\n-restful</a>\n```\n\n","tags":["Spring Boot","thymeleaf"]},{"title":"Spring Boot 整合Freemarker","url":"/2019/03/28/Spring-Boot-整合Freemarker/","content":"\nFreeMarker 是一个模板引擎，一个基于模板生成文本输出的通用工具，使用纯 Java 编写，FreeMarker 被设计用来生成 HTML Web 页面，特别是基于 MVC 模式的应用程序，虽然 FreeMarker 具有一些编程的能力，但通常由 Java 程序准备要显示的数据，由FreeMarker 生成页面，通过模板显示准备的数据。符合MVC模式，采用哈希表存储，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据\n\n\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Freemarker \n\n## 创建maven项目,添加依赖\n\n```xml\n<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-freemarker</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n```\n\n## 编写视图\n\n在templates/ 下建立 userList.ftl:\n\n```html\n<html>\n\t\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>显示用户数据</title>\n\t</head>\n\t<body>\n\t\t<table border=\"1\" align=\"center\" width=\"50%\">\n\t\t\t<tr>\n\t\t\t\t<th>ID</th>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Age</th>\n\t\t\t</tr>\n\n            <#list list as user>\n                <tr>\n                    <td>${user.userid}</td>\n                    <td>${user.username}</td>\n                    <td>${user.userage}</td>\n                </tr>\n            </#list>\n\n\t\t</table>\n\t</body>\n</html>\n\n```\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewfreemarker.controller;\n\nimport com.caicai.springbootviewfreemarker.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n## 创建Uesrs类\n\n```java\npackage com.caicai.springbootviewfreemarker.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2820:06\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n## 创建启动类\n\n```java\npackage com.caicai.springbootviewfreemarker;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n","tags":["Spring Boot"]},{"title":"Spring Boot 整合jsp","url":"/2019/03/28/Spring-Boot-整合jsp/","content":"\n Spring Boot 整合jsp\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 创建maven项目,添加pom依赖\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.caicai</groupId>\n\t<artifactId>08-spring-boot-view-jsp</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>08-spring-boot-view-jsp</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n        <!-- tomcat支持 -->\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-jasper</artifactId>\n        </dependency>\n        <!-- jstl标签库 -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n        </dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n\n```\n\n\n\n## 创建SpringBoot全局配置\n\napplication.yml:\n\n```xml\nspring:\n  mvc:\n    view:\n      prefix: /WEB-INF/jsp/\n      suffix: .jsp\n```\n\n## 创建Users类\n\n```java\npackage com.caicai.springbootviewjsp.pojo;\n\n/**\n * @author liu\n * @title: Users\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:16\n */\npublic class Users {\n    private Integer userid;\n    private String username;\n    private Integer userage;\n\n\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public Integer getUserage() {\n        return userage;\n    }\n\n    public void setUserage(Integer userage) {\n        this.userage = userage;\n    }\n\n    public Users() {\n    }\n\n    public Integer getUserid() {\n        return userid;\n    }\n\n    public void setUserid(Integer userid) {\n        this.userid = userid;\n    }\n\n    public Users(Integer userid, String username, Integer userage) {\n        this.userid = userid;\n        this.username = username;\n        this.userage = userage;\n    }\n}\n\n```\n\n\n\n## 创建Controller\n\n```java\npackage com.caicai.springbootviewjsp.controller;\n\nimport com.caicai.springbootviewjsp.pojo.Users;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author liu\n * @title: UserController\n * @projectName 08-spring-boot-view-jsp\n * @description: TODO\n * @date 2019/3/2813:15\n */\n@Controller\npublic class UserController {\n    /**\n     * 处理请求 产生数据\n     */\n    @RequestMapping(\"/showuser\")\n    public String showUser(Model model){\n        List<Users> list = new ArrayList<>();\n        list.add(new Users(1,\"caicai\",21));\n        list.add(new Users(2,\"honghong\",32));\n        list.add(new Users(3,\"mingming\",43));\n        model.addAttribute(\"list\",list);\n        return \"userList\";\n\n    }\n}\n\n```\n\n\n\n## 创建jsp\n\nuserList.jsp:\n\n```xml\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n         pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Insert title here</title>\n</head>\n<body>\n    <table border=\"1\" align=\"center\" width=\"50%\">\n        <tr>\n            <th>ID:</th>\n            <th>姓名:</th>\n            <th>年龄</th>\n\n        </tr>\n        <c:forEach items=\"${list}\" var=\"user\">\n        <tr>\n            <td>${user.userid}</td>\n            <td>${user.username}</td>\n            <td>${user.userage}</td>\n        </tr>\n\n\n        </c:forEach>\n    </table>\n</body>\n</html>\n```\n\n\n\n## 创建启动类:\n\n```java\npackage com.caicai.springbootviewjsp;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n\n```\n\n\n\n## 效果图:\n\n![](/Spring-Boot-整合jsp/1.png)","tags":["Spring Boot"]},{"title":"Spring-Boot-文件上传","url":"/2019/03/27/Spring-Boot-文件上传/","content":"\nSpring-Boot-文件上传\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 编写Controller\n\n```java\npackage com.caicai.springbootstaticresources1.controller;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FileController\n * @projectName 05-spring-boot-static-resources1\n * @description: TODO\n * @date 2019/3/2719:04\n */\n@RestController\npublic class FileController {\n\n    @RequestMapping(value = \"/fileUploadController\")\n    public String fileUpload(@RequestParam(\"filename\") MultipartFile file){\n        System.out.println(file.getName());\n        try {\n            file.transferTo(new File(\"F:/\"+file.getName()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"success\";\n    }\n}\n\n```\n\n## 编写上传界面\n\n为了方便在static文件夹下建立upload.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件上传</title>\n</head>\n<body>\n    <form action=\"fileUploadController\" method=\"post\" enctype=\"multipart/form-data\">\n        上传文件:<input type=\"file\" name=\"filename\">\n        <input type=\"submit\">\n    </form>\n</body>\n</html>\n```\n\n## 设置上传文件大小的默认值\n\n在resources下建立application.yml文件\n\n```xml\nspring:\n  servlet:\n    multipart:\n      max-file-size: 10MB   #设置单个上传文件的大小\n      max-request-size: 100MB  #设置一次请求上传文件的总容量\n      enabled: true\n```\n\n","tags":["Spring Boot"]},{"title":"Spring-Boot 整合Servlet和Filter","url":"/2019/03/27/Spring-Boot-整合Servlet/","content":"\nSpring-Boot 整合Servlet和Filter\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 整合Servlet\n\n## 传统方式配置\n\n```xml\n\n<servlet>\n<servlet-name>FirstServlet</servlet-name>\n<servlet-class>com.caicai.springbootservlet.filter.FirstFilter</servlet-class>\n</servlet>\n\n<servlet-mapping>\n<servlet-name>FirstServlet</servlet-name>\n<url-pattern>/first</url-pattern>\n</servlet-mapping>\n\n```\n\n## 通过注解扫描注册Servlet\n\n使用@WebServlet注解并在启动类上使用@ServletComponentScan注解\n\n```java\n@WebServlet(name = \"FirstServlet\",urlPatterns = \"/first\")\npublic class FirstServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"FirstServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n\n}\n```\n\n## 通过方法完成Servlet组件的注册\n\n通过使用@Bean注解的形式注册组件\n\n```java\npublic class SecondServlet extends HttpServlet{\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"SecondServlet.....\");\n    }\n}\n```\n\n```java\n@SpringBootApplication\npublic class App2 {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public ServletRegistrationBean getServletRegistrationBean() {\n        ServletRegistrationBean bean = new ServletRegistrationBean(new SecondServlet());\n        bean.addUrlMappings(\"/second\");//添加url路径\n        return bean;\n    }\n}\n```\n\n\n\n\n\n# 整合Filter\n\n## 传统方式配置\n\n```xml\n<filter>\n<filter-name>FirstFilter</filter-name>\n<filter-class>com.caicai.springbootservlet.filter.FirstFilter</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>FirstFilter</filter-name>\n<url-pattern>/filter1</url-pattern>\n</filter-mapping>\n\n```\n\n\n\n## 通过注解扫描注册Servlet\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: FirstFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n//@WebFilter(filterName = \"\",urlPatterns ={\"*.do\",\"*.jsp\"})\n@WebFilter(filterName = \"FirstFilter\",urlPatterns =\"/filter1\")\npublic class FirstFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n启动类:\n\n````java\npackage com.caicai.springbootservlet;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.ServletComponentScan;\n\n@SpringBootApplication\n@ServletComponentScan //在SpringBoot启动时会扫描@WebServlet注解 并将该类实例化\npublic class App3 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App3.class, args);\n\t}\n\n}\n\n````\n\n## 通过方法完成Filter的注册\n\n```java\npackage com.caicai.springbootservlet.filter;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport java.io.IOException;\n\n/**\n * @author liu\n * @title: SecondFilter\n * @projectName 02-spring-boot-servlet\n * @description: TODO\n * @date 2019/3/2718:19\n */\n\npublic class SecondFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"init.......\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"进入filter2.......\");\n        filterChain.doFilter(servletRequest,servletResponse);\n        System.out.println(\"离开filter2.......\");\n\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy.......\");\n\n    }\n}\n\n```\n\n```java\npackage com.caicai.springbootservlet;\n\nimport com.caicai.springbootservlet.filter.SecondFilter;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class App4 {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(App4.class, args);\n\t}\n\n\t@Bean\n\tpublic FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean bean = new FilterRegistrationBean(new SecondFilter()) ;\n        bean.addUrlPatterns(\"/filter2\");\n        return bean;\n    }\n\n}\n```\n\n","tags":["Spring Boot","Servlet"]},{"title":"String，StringBuilder，StringBuffer三者的区别","url":"/2019/03/26/string相关/","content":"\n最近突然被问起String，StringBuilder，StringBuffer三者的区别,发现自己确实对这方面的知识不是很了解.所以学习了一下做个笔记.\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## String\n\n+ String 类是一个常量，String类本身和其中存储字符的数组都是用final关键字修饰的,所以不能被继承\n\n```java\n    /** The value is used for character storage. */\n    private final char value[];\n```\n\n### String str=\"hello world\"和String str=new String(\"hello world\")的区别\n\n\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string1 = \"hello word\";\n        String string2 = new String(\"hello world\");\n        String string3 = \"hello word\";\n        String string4 = new String(\"hello world\");\n        System.out.println(string1 == string2);\n        System.out.println(string1 == string3);\n        System.out.println(string2 == string4);\n    }\n}\n\n```\n\n上面代码的输出结果为:\n\nfalse\n\ntrue\n\nfalse\n\n我们发现 同样都都是\"helllo world\" string1 和 string3 相等.是因为string1 和 string3 都是赋值为一个字面常量\"hello world\",在JVM运行时候,会在常量池里寻找是否已经存在相同的常量,如果存在便直接将引用指向已有常量,否则就创建一个常量,并且将引用指向他,对于string2 和string4来说,两者都是采取了new 来创建的,是两个不同的对象,所以不相等.\n\n## StringBuilder\n\n\n\n在第二点中,我们看到String是一个final类,打开StringBuilder,我们发现StringBuilder类是AbstractStringBuilder的子类,在AbstractStringBuilder类中,我们看到与String不同,StringBuilder存储字符的数组是可变的\n\n```java\n  /**\n     * The value is used for character storage.\n     */\n    char[] value;\n```\n\n## StringBuilder和String 区别\n\n\n\n对于实际应用来说 假设有如下代码\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        String string = \"\";\n        for (int i = 0; i < 1000; i++) {\n            string += \"A\";\n        }\n\n\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < 1000; i++) {\n            stringBuilder.append(\"A\");\n        }\n    }\n}\n\n```\n\n上述代码进行了一个1000次的循环,每次在字符串string后面追加一个字符A,无论使用的是String,还是StringBuilder,最后的结果都为长度为1000的字符全为A的字符串.而不同的是,如果使用StringBuilder,append操作是在原有的对象基础上进行的,而使用String每次循环都会新建一个StringBuilder对象,进行append操作,通过toString方法返回String对象,如果这些对象没有被回收会浪费大量资源,\n\n## StringBuilder和StringBuffer区别\n\n对比StringBuilder和StringBuffer源码,我们发现在StringBuffer中很多方法都加上了synchronized关键字,所以StringBuffer是线程安全的,不过相应的,在提升了安全的同时对资源的消耗也会增大\n\n```java\n        /**\n         * StringBuffer append方法\n         */\n        @Override\n        public synchronized StringBuffer append (String str){\n            toStringCache = null;\n            super.append(str);\n            return this;\n        }\n        \n        /**\n         * StringBuilder append方法\n         */\n\n        @Override\n        public StringBuilder append (String str){\n            super.append(str);\n            return this;\n        }\n```\n\n## 结论\n\n三个类应当根据不同的情况来进行选择使用：\n\n当字符串相加操作或者改动较少的情况下，建议使用 String str=\"hello\"这种形式\n\n当字符串相加操作较多的情况下，建议使用StringBuilder\n\n如果采用了多线程，则使用StringBuffer。\n\n","tags":["java","String"]},{"title":"swagger2简介","url":"/2019/03/19/swagger2简介/","content":"\nSwagger 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 关于Swagger\n\n\n\nSwagger能成为最受欢迎的REST APIs文档生成工具之一，有以下几个原因：\n\n- Swagger 可以生成一个具有互动性的API控制台，开发者可以用来快速学习和尝试API。\n- Swagger 可以生成客户端SDK代码用于各种不同的平台上的实现。\n- Swagger 文件可以在许多不同的平台上从代码注释中自动生成。\n- Swagger 有一个强大的社区，里面有许多强悍的贡献者。\n\nSwagger 文档提供了一个方法，使我们可以用指定的 JSON 或者 YAML 摘要来描述你的 API，包括了比如 names、order 等 API 信息。\n\n你可以通过一个文本编辑器来编辑 Swagger 文件，或者你也可以从你的代码注释中自动生成。各种工具都可以使用 Swagger 文件来生成互动的 API 文档。\n\n> 注意：用 Swagger 文件生成互动的 API 文档是最精简的，它展示了资源、参数、请求、响应。但是它不会提供你的API如何工作的其他任何一个细节。\n\n## Spring Boot集成使用Swagger\n\n### 创建Spring Boot Web工程并且引入Swagger依赖\n\n所需Swagger依赖可以在[Maven仓库](https://mvnrepository.com/) 中找查询\n\n```xml\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n```\n\n### 创建User实体类\n\n```java\npackage com.example.demo.domain;\n\n/**\n * @author liu\n * @title: User\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:52\n */\npublic class User {\n    private Long id;\n    private String username;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                '}';\n    }\n}\n\n```\n\n### 在启动类目录创建Swagger2配置类\n\n```java\npackage com.example.demo;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class Swagger2  {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.example.demo.controller\"))//扫描controller下的包\n                .paths(PathSelectors.any())\n                .build();\n    }\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Spring Boot中使用Swagger2构建RESTful APIs\")\n                .description(\"swagger2 构建APIS\")\n                .version(\"1.0\")\n                .build();\n    }\n}\n```\n\n### 创建UserController类\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.domain.User;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiImplicitParam;\nimport io.swagger.annotations.ApiImplicitParams;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author liu\n * @title: HelloController\n * @projectName demo\n * @description: TODO\n * @date 2019/3/1821:48\n */\n@RestController\n@Api(tags = \"用户模块\")\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    /**\n     * 此处为了方便直接用一个Map来模拟数据库进行操作\n     */\n    static Map<Long, User> userMap;\n\n    static {\n        userMap = new HashMap<>();\n        User user = new User();\n        user.setId((long) 10000);\n        user.setUsername(\"admin\");\n        userMap.put((long) 10000,user);\n    }\n\n    @ApiOperation(value = \"获取用户列表\")\n    @RequestMapping(value = \"list\", method = RequestMethod.GET)\n    public List<User> getUserList() {\n\n        return new ArrayList<User>(userMap.values());\n    }\n\n\n    @ApiOperation(value = \"创建用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.POST)\n    public String postUser(User user) {\n\n        userMap.put(user.getId(),user);\n        return \"添加成功\";\n    }\n\n\n\n    @ApiOperation(value = \"获取用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.GET)\n    public User getUser(@RequestParam(\"id\") Long id) {\n        System.out.println(id);\n        return userMap.get(id);\n    }\n\n\n\n    @ApiOperation(value = \"更新用户\")\n    @ApiImplicitParams({@ApiImplicitParam(paramType = \"query\", name = \"id\", dataType = \"Long\", required = true, value = \"用户id\", defaultValue = \"10001\"),\n            @ApiImplicitParam(paramType = \"query\", name = \"username\", dataType = \"String\", required = true, value = \"用户名字\", defaultValue = \"菜菜\")\n    })\n    @RequestMapping(value = \"\", method = RequestMethod.PUT)\n    public String putUser(User user) {\n        userMap.put(user.getId(),user);\n        return \"更新成功\";\n    }\n\n\n    @ApiOperation(value = \"删除用户\")\n    @ApiImplicitParam(paramType = \"query\", required = true, name = \"id\", dataType = \"Long\", value = \"用户id\")\n    @RequestMapping(value = \"\", method = RequestMethod.DELETE)\n    public String deleteUser(@RequestParam(\"id\") Long id) {\n        userMap.remove(id);\n        return \"删除成功\";\n    }\n}\n\n```\n\n### 测试:\n\n主界面:\n\n![主界面](/swagger2简介/1.png)\n\n查询用户列表:\n\n![](/swagger2简介/2.png)\n\n创建用户:\n\n![](/swagger2简介/3.png)\n\n获取用户:\n\n![](/swagger2简介/4.png)\n\n删除用户:\n\n![](/swagger2简介/5.png)\n\n## 使用过程中遇到的问题\n\n(1)java.lang.NumberFormatException: For input string: \"\"\n\n在使用@ApiModelProperty注解在字段上时，如果字段的类型为Long或是int类型，那么程序启动后，访问swagger-ui.html的页面，程序会报错\n\njava.lang.NumberFormatException: For input string: \"\"\n在swagger的官方文档中介绍是一个bug；可以忽略这个错误，如果看着不爽，可以调整日志的级别\n\napplication.yml:\n\n```xml\nlogging:\n  level:\n    io.swagger.models.parameters.AbstractSerializableParameter: error\n```\n\n\n\n(2)@Api()注解中使用tags = \"\"参数才能改变api名字 例如@Api(tags = \"用户模块\")\n\n\n\n(3)requestparam 和pathvariable区别 :\n\n@PathVariable:从路径路去获取变量,也就是把路径名当作变量 例如:\n\n```xml\nhttp://localhost:8080/user?id=5\n```\n\n@RequestParam:从请求里面获取参数,例如:\n\n```xml\nhttp://localhost:8080/user?5\n```\n\n","tags":["Spring Boot","swagger"]},{"title":"mysql的时区错误问题： The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one","url":"/2019/03/18/mysql的时区错误问题：-The-server-time-zone-value-OÐ¹u±e×¼E±¼a-is-unrecognized-or-represents-more-than-one/","content":"\n链接数据库时候出现cexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException:\n\n <Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n\n## spring boot 链接数据库的时候报错\n\n```java\ncexception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: \n### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n### The error may exist in com/wj/mapper/UserLoginMapper.xml\n### The error may involve com.wj.mapper.UserLoginMapper.selectByName\n### The error occurred while executing a query\n### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!\n    org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)\n    org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:650)\n    org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:731)\n```\n```java\njava.sql.SQLException: The server time zone value 'ÖÐ¹ú±ê×¼Ê±¼ä' is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:127)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:95)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:87)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:61)\n    com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:71)\n    com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:76)\n    com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:862)\n    com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:444)\n    com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:230)\n    com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:226)\n    com.mchange.v2.c3p0.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:175)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:220)\n    com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.getPooledConnection(WrapperConnectionPoolDataSource.java:206)\n    com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool$1PooledConnectionResourcePoolManager.acquireResource(C3P0PooledConnectionPool.java:203)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquire(BasicResourcePool.java:1138)\n    com.mchange.v2.resourcepool.BasicResourcePool.doAcquireAndDecrementPendingAcquiresWithinLockOnSuccess(BasicResourcePool.java:1125)\n    com.mchange.v2.resourcepool.BasicResourcePool.access$700(BasicResourcePool.java:44)\n    com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask.run(BasicResourcePool.java:1870)\n    com.mchange.v2.async.ThreadPoolAsynchronousRunner$PoolThread.run(ThreadPoolAsynchronousRunner.java:696)\n```\n## 解决方案:\n\n据查询是因为电脑的时区和mysql的时区不一样导致的\n用 打开mysql \n\n```sql\nshow variables like '%time_zone%'; //查询mysql的时区\nset global time_zone='+8:00'; //设置时区\n```","tags":["MYSQL","Spring Boot"]},{"title":"navicat 连接 mysql   Client does not support authentication protocol requested by server","url":"/2019/03/18/navicat-连接-mysql-Client-does-not-support-authentication-protocol-requested-by-server/","content":"\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 报错信息:\n\n```java\nClient does not support authentication protocol requested by server; consider upgrading MySQL client\n```\n\n## 解决方案:\n\n打开mysql的MySQL Command Line Client 输入:\n```\nUSE mysql;\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';\nFLUSH PRIVILEGES; \n```\n\nlocalhost:本机地址\n123456:要设置的密码","tags":["MYSQL"]},{"title":"hexo 常用命令","url":"/2019/03/18/hexo-常用命令/","content":"\nhexo 的一些常用命令\n\n<Excerpt in index | 首页摘要>\n\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## hexo\n\n```\nnpm install hexo -g #安装  \nnpm update hexo -g #升级  \nhexo init #初始化\n```\n\n## 简写\n\n`hexo n \"我的博客\"` == `hexo new \"我的博客\"` #新建文章\n`hexo p` == `hexo publish`\n`hexo g` == `hexo generate`#生成\n`hexo s` == `hexo server` #启动服务预览\n`hexo d` == `hexo deploy`#部署\n\n## 服务器\n\n`hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n`hexo server -s` #静态模式\n`hexo server -p 5000` #更改端口\n`hexo server -i 192.168.1.1` #自定义 IP\n\n`hexo clean` #清除缓存 网页正常情况下可以忽略此条命令\n`hexo g` #生成静态网页\n`hexo d` #开始部署\n\n### 监视文件变动\n\n`hexo generate` #使用 Hexo 生成静态文件快速而且简单\n`hexo generate --watch` #监视文件变动\n\n### 完成后部署\n\n> 两个命令的作用是相同的\n> `hexo generate --deploy`\n> `hexo deploy --generate`\n\n```\nhexo deploy -g`\n`hexo server -g\n```\n\n## 草稿\n\n```\nhexo publish [layout] <title>\n```\n\n## 模版\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n`hexo deploy` #将.deploy目录部署到GitHub\n\n```\nhexo new [layout] <title>`\n`hexo new photo \"My Gallery\"`\n`hexo new \"Hello World\" --lang tw\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n```\ntitle: 使用Hexo搭建个人博客\nlayout: post\ndate: 2019-03-18 14:59:30\ncomments: true\ncategories: Blog\ntags: [Hexo]\nkeywords: Hexo, Blog\ndescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。\n```\n\n## 模版（Scaffold）\n\n```\nhexo new photo \"My Gallery\"\n```\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n## 设置文章摘要\n\n```\n以上是文章摘要 <!--more--> 以下是余下全文 \n```\n\n## 写作\n\n```\nhexo new page <title>`\n`hexo new post <title>\n```\n\n| 变量     | 描述                       |\n| -------- | -------------------------- |\n| :title   | 标题                       |\n| :year    | 建立的年份（4 位数）       |\n| :month   | 建立的月份（2 位数）       |\n| :i_month | 建立的月份（去掉开头的零） |\n| :day     | 建立的日期（2 位数）       |\n| :i_day   | 建立的日期（去掉开头的零） |\n\n### 推送到服务器上\n\n```\nhexo n` #写文章\n`hexo g` #生成\n`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g\n```\n\n## 报错\n\n### 1.找不到git部署\n\n```\nERROR Deployer not found: git\n```\n\n**解决方法**\n\n```\nnpm install hexo-deployer-git --save\n```\n\n### 3.部署类型设置git\n\nhexo 3.0 部署类型不再是`github`，`_config.yml` 中修改\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: git@***.github.com:***/***.github.io.git\n  branch: master\n```\n\n### 4. xcodebuild\n\nxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n\n```\nnpm install bcrypt\n```\n\n### 5. RSS不显示\n\n#### 安装RSS插件\n\n```\nnpm install hexo-generator-feed --save\n```\n\n#### 开启RSS功能\n\n编辑hexo/_config.yml，添加如下代码：\n\n```\nrss: /atom.xml #rss地址  默认即可\n```","tags":["hexo"]}]